# Production Docker Compose for Walmart Grocery Agent
# Local deployment with microservices architecture

version: '3.8'

services:
  # ============================================================================
  # Main Application Service
  # ============================================================================
  walmart-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: walmart-grocery-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_PATH=/app/data/walmart_grocery.db
      - WEBSOCKET_PORT=8080
      - PRICING_SERVICE_URL=http://pricing-service:3007
      - NLP_SERVICE_URL=http://nlp-service:3008
      - CACHE_SERVICE_URL=http://cache-warmer:3006
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - pricing-service
      - nlp-service
    restart: unless-stopped
    networks:
      - walmart-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Microservices
  # ============================================================================
  
  # NLP Service (Qwen3:0.6b Model)
  nlp-service:
    build:
      context: ./src/microservices/nlp-service
      dockerfile: Dockerfile
    container_name: walmart-nlp-service
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - MODEL_PATH=/app/models/qwen3-0.6b
      - SERVICE_PORT=3008
    volumes:
      - ./models:/app/models:ro
    restart: unless-stopped
    networks:
      - walmart-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pricing Service
  pricing-service:
    build:
      context: .
      dockerfile: Dockerfile.pricing-service
    container_name: walmart-pricing-service
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3007
      - DATABASE_PATH=/app/data/walmart_grocery.db
    volumes:
      - ./data:/app/data:ro
    restart: unless-stopped
    networks:
      - walmart-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Warmer Service
  cache-warmer:
    build:
      context: .
      dockerfile: Dockerfile.cache-warmer
    container_name: walmart-cache-warmer
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - SERVICE_PORT=3006
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - walmart-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Infrastructure Services
  # ============================================================================
  
  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: walmart-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - walmart-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Gateway (standalone)
  websocket-gateway:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: walmart-websocket-gateway
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - WEBSOCKET_PORT=8080
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - walmart-network

  # ============================================================================
  # Monitoring and Observability
  # ============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: walmart-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - walmart-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: walmart-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=walmart123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/walmart-dashboard.json
    restart: unless-stopped
    networks:
      - walmart-network

  # Health Check Service
  health-monitor:
    build:
      context: .
      dockerfile: Dockerfile.health-monitor
    container_name: walmart-health-monitor
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - MONITORING_INTERVAL=30000
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - walmart-network

# ============================================================================
# Networks and Volumes
# ============================================================================
networks:
  walmart-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local