<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="328" failures="7" errors="0" time="3.443">
    <testsuite name="src/core/data-collection/DataCollectionPipeline.test.ts" timestamp="2025-07-18T17:19:28.794Z" hostname="NPAMD" tests="13" failures="0" errors="0" skipped="0" time="0.082">
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; initialization &gt; should initialize successfully" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data source management &gt; should add a new data source" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data source management &gt; should update an existing data source" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data source management &gt; should remove a data source" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data source management &gt; should throw error when updating non-existent source" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data source management &gt; should throw error when removing non-existent source" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data collection &gt; should collect data from a search engine source" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data collection &gt; should handle collection errors gracefully" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; data collection &gt; should not collect from inactive sources" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; statistics &gt; should return accurate pipeline statistics" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; scheduled collection &gt; should run scheduled collection for all active sources" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; event emission &gt; should emit events for source operations" time="0">
        </testcase>
        <testcase classname="src/core/data-collection/DataCollectionPipeline.test.ts" name="DataCollectionPipeline &gt; event emission &gt; should emit events for job operations" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/maestro/TaskQueue.test.ts" timestamp="2025-07-18T17:19:28.800Z" hostname="NPAMD" tests="20" failures="0" errors="0" skipped="0" time="0.025">
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; enqueue &gt; should add tasks to the queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; enqueue &gt; should order tasks by priority" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; enqueue &gt; should handle tasks without priority" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; dequeue &gt; should return null for empty queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; dequeue &gt; should remove and return the highest priority task" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; dequeue &gt; should maintain FIFO order for same priority" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; peek &gt; should return the next task without removing it" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; peek &gt; should return null for empty queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; clear &gt; should remove all tasks from the queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; isEmpty &gt; should return true for empty queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; isEmpty &gt; should return false for non-empty queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; size &gt; should return the correct number of tasks" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; toArray &gt; should return all tasks in priority order" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; toArray &gt; should not modify the original queue" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; findById &gt; should find a task by ID" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; findById &gt; should return null if task not found" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; removeById &gt; should remove a task by ID" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; removeById &gt; should return false if task not found" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; concurrent operations &gt; should handle multiple operations safely" time="0">
        </testcase>
        <testcase classname="src/core/maestro/TaskQueue.test.ts" name="TaskQueue &gt; performance &gt; should handle large queues efficiently" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" timestamp="2025-07-18T17:19:28.808Z" hostname="NPAMD" tests="10" failures="1" errors="0" skipped="0" time="0.028">
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Initialization &gt; should initialize successfully" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Initialization &gt; should handle RAG initialization failure gracefully" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Query Processing &gt; should process a simple query with real LLM" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Query Processing &gt; should handle query metadata" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Plan Creation &gt; should create a plan structure with real LLM" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Agent Registry &gt; should have access to agent registry" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Database Integration &gt; should work with in-memory database" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Error Handling &gt; should handle empty queries gracefully" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests &gt; Error Handling &gt; should handle queries without conversation ID" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.basic.test.ts" name="MasterOrchestrator Basic Tests" time="0.003">
            <failure message="isOllamaRunning is not a function" type="TypeError">
TypeError: isOllamaRunning is not a function
 ‚ùØ src/core/master-orchestrator/MasterOrchestrator.basic.test.ts:20:31
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/master-orchestrator/MasterOrchestrator.test.ts" timestamp="2025-07-18T17:19:28.813Z" hostname="NPAMD" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/core/master-orchestrator/MasterOrchestrator.test.ts" name="src/core/master-orchestrator/MasterOrchestrator.test.ts" time="0">
            <failure message="Failed to load url ../../test/mocks/ollama.mock (resolved id: ../../test/mocks/ollama.mock) in /home/pricepro2006/CrewAI_Team/src/core/master-orchestrator/MasterOrchestrator.test.ts. Does the file exist?" type="Error">
Error: Failed to load url ../../test/mocks/ollama.mock (resolved id: ../../test/mocks/ollama.mock) in /home/pricepro2006/CrewAI_Team/src/core/master-orchestrator/MasterOrchestrator.test.ts. Does the file exist?
 ‚ùØ loadAndTransform node_modules/.pnpm/vite@5.4.19_@types+node@20.19.8/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:51968:17
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/master-orchestrator/PlanExecutor.test.ts" timestamp="2025-07-18T17:19:28.815Z" hostname="NPAMD" tests="9" failures="0" errors="0" skipped="0" time="0.084">
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; execute &gt; should execute a simple plan successfully" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; execute &gt; should handle step failures gracefully" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; execute &gt; should handle missing agents" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; execute &gt; should respect step dependencies" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; execute &gt; should handle circular dependencies" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; executeWithProgress &gt; should report progress during execution" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; executeWithProgress &gt; should report failures in progress" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; parallel execution &gt; should execute independent steps in parallel" time="0">
        </testcase>
        <testcase classname="src/core/master-orchestrator/PlanExecutor.test.ts" name="PlanExecutor &gt; context passing &gt; should pass context between dependent steps" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/DocumentProcessor.test.ts" timestamp="2025-07-18T17:19:28.818Z" hostname="NPAMD" tests="18" failures="0" errors="0" skipped="0" time="0.088">
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; processDocument &gt; should process a simple text document" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; processDocument &gt; should handle markdown documents" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; processDocument &gt; should chunk large documents" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; cleanText (via processDocument) &gt; should remove extra whitespace" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; cleanText (via processDocument) &gt; should remove control characters" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; cleanText (via processDocument) &gt; should normalize line breaks by default" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; cleanText (via processDocument) &gt; should preserve line breaks when preserveFormatting is true" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; cleanText (via processDocument) &gt; should handle empty strings" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; chunkText (via processDocument) &gt; should create chunks with overlap" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; chunkText (via processDocument) &gt; should handle sentence-based chunking" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; chunkText (via processDocument) &gt; should handle text shorter than chunk size" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; different chunking strategies &gt; should support fixed-size chunking" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; different chunking strategies &gt; should support sentence-based chunking" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; metadata extraction &gt; should extract basic metadata" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; metadata extraction &gt; should add chunk metadata" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; edge cases &gt; should handle null content gracefully" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; edge cases &gt; should handle very long lines" time="0">
        </testcase>
        <testcase classname="src/core/rag/DocumentProcessor.test.ts" name="DocumentProcessor &gt; edge cases &gt; should handle special characters" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/EmbeddingService.test.ts" timestamp="2025-07-18T17:19:28.825Z" hostname="NPAMD" tests="18" failures="0" errors="0" skipped="0" time="0.072">
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; initialize &gt; should initialize successfully when Ollama is available" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; initialize &gt; should warn when embedding model is not found" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; initialize &gt; should throw error when connection fails" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; embed &gt; should generate embeddings for text" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; embed &gt; should handle empty text" time="0.001">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; embed &gt; should return zero vector on error" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; embedBatch &gt; should generate embeddings for multiple texts" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; embedBatch &gt; should handle large batches efficiently" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; cosineSimilarity &gt; should calculate similarity between identical vectors" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; cosineSimilarity &gt; should calculate similarity between opposite vectors" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; cosineSimilarity &gt; should handle embeddings of different lengths" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; cosineSimilarity &gt; should handle zero vectors" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; findSimilar &gt; should find similar embeddings" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; findSimilar &gt; should respect topK parameter" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; findSimilar &gt; should return all results when topK exceeds available embeddings" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; utility methods &gt; should return correct dimensions" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; utility methods &gt; should return correct model name" time="0">
        </testcase>
        <testcase classname="src/core/rag/EmbeddingService.test.ts" name="EmbeddingService &gt; error handling &gt; should handle initialization before embed calls" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/RetrievalService.test.ts" timestamp="2025-07-18T17:19:28.836Z" hostname="NPAMD" tests="11" failures="0" errors="0" skipped="0" time="0.044">
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; enhance &gt; should filter results by minimum score" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; enhance &gt; should rerank results when enabled" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; enhance &gt; should diversify results when diversity factor is set" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; enhance &gt; should boost recent documents when enabled" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; enhance &gt; should handle empty results" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; enhance &gt; should preserve results when no enhancements are configured" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; filterByMetadata &gt; should filter results by metadata fields" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; filterByMetadata &gt; should handle array values in filters" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; highlightMatches &gt; should extract relevant sentences containing query terms" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; highlightMatches &gt; should limit highlights to 3 per result" time="0">
        </testcase>
        <testcase classname="src/core/rag/RetrievalService.test.ts" name="RetrievalService &gt; extractTerms &gt; should extract and normalize terms from text" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/test/system/comprehensive-verification.test.ts" timestamp="2025-07-18T17:19:28.844Z" hostname="NPAMD" tests="4" failures="0" errors="0" skipped="0" time="0.126">
        <testcase classname="src/test/system/comprehensive-verification.test.ts" name="Comprehensive Critical Issues Verification &gt; should verify Ollama timeout is under 30 seconds" time="0">
        </testcase>
        <testcase classname="src/test/system/comprehensive-verification.test.ts" name="Comprehensive Critical Issues Verification &gt; should verify multiple consecutive requests perform consistently" time="0">
        </testcase>
        <testcase classname="src/test/system/comprehensive-verification.test.ts" name="Comprehensive Critical Issues Verification &gt; should verify server can start within timeout" time="0">
        </testcase>
        <testcase classname="src/test/system/comprehensive-verification.test.ts" name="Comprehensive Critical Issues Verification &gt; should generate comprehensive report" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/test/system/critical-issues-simple.test.ts" timestamp="2025-07-18T17:19:28.847Z" hostname="NPAMD" tests="2" failures="0" errors="0" skipped="0" time="0.066">
        <testcase classname="src/test/system/critical-issues-simple.test.ts" name="Critical Issues - Quick Verification &gt; should verify Ollama responds within 30 seconds" time="0">
        </testcase>
        <testcase classname="src/test/system/critical-issues-simple.test.ts" name="Critical Issues - Quick Verification &gt; should generate quick report" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/test/system/critical-issues-verification.test.ts" timestamp="2025-07-18T17:19:28.849Z" hostname="NPAMD" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/test/system/critical-issues-verification.test.ts" name="src/test/system/critical-issues-verification.test.ts" time="0">
            <failure message="Cannot find module &apos;@/core/rag/ChromaDBService&apos; imported from &apos;/home/pricepro2006/CrewAI_Team/src/test/system/critical-issues-verification.test.ts&apos;.

- If you rely on tsconfig.json&apos;s &quot;paths&quot; to resolve modules, please install &quot;vite-tsconfig-paths&quot; plugin to handle module resolution.
- Make sure you don&apos;t have relative aliases in your Vitest config. Use absolute paths instead. Read more: https://vitest.dev/guide/common-errors" type="Error">
Error: Cannot find module &apos;@/core/rag/ChromaDBService&apos; imported from &apos;/home/pricepro2006/CrewAI_Team/src/test/system/critical-issues-verification.test.ts&apos;.

- If you rely on tsconfig.json&apos;s &quot;paths&quot; to resolve modules, please install &quot;vite-tsconfig-paths&quot; plugin to handle module resolution.
- Make sure you don&apos;t have relative aliases in your Vitest config. Use absolute paths instead. Read more: https://vitest.dev/guide/common-errors
 ‚ùØ src/test/system/critical-issues-verification.test.ts:7:31

‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ
Serialized Error: { code: &apos;ERR_MODULE_NOT_FOUND&apos; }
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/agents/specialized/ResearchAgent.test.ts" timestamp="2025-07-18T17:19:28.850Z" hostname="NPAMD" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/core/agents/specialized/ResearchAgent.test.ts" name="src/core/agents/specialized/ResearchAgent.test.ts" time="0">
            <failure message="Failed to load url ../../../test/mocks/ollama.mock (resolved id: ../../../test/mocks/ollama.mock) in /home/pricepro2006/CrewAI_Team/src/core/agents/specialized/ResearchAgent.test.ts. Does the file exist?" type="Error">
Error: Failed to load url ../../../test/mocks/ollama.mock (resolved id: ../../../test/mocks/ollama.mock) in /home/pricepro2006/CrewAI_Team/src/core/agents/specialized/ResearchAgent.test.ts. Does the file exist?
 ‚ùØ loadAndTransform node_modules/.pnpm/vite@5.4.19_@types+node@20.19.8/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:51968:17
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/BERTRanker.test.ts" timestamp="2025-07-18T17:19:28.852Z" hostname="NPAMD" tests="16" failures="0" errors="0" skipped="0" time="0.043">
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; initialization &gt; should initialize successfully with mock pipeline" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; initialization &gt; should handle initialization failure gracefully" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; initialization &gt; should only initialize once" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; rerank &gt; should rerank documents based on semantic similarity" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; rerank &gt; should respect topK parameter" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; rerank &gt; should handle empty document list" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; rerank &gt; should fallback gracefully when pipeline fails" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; rerank &gt; should work without initialization (fallback mode)" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; calculateRerankingConfidence &gt; should calculate high confidence for well-separated scores" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; calculateRerankingConfidence &gt; should calculate low confidence for similar scores" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; calculateRerankingConfidence &gt; should return 0 for empty results" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; batchRerank &gt; should process multiple queries efficiently" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; batchRerank &gt; should throw error for mismatched arrays" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; getModelInfo &gt; should return correct model information" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; dispose &gt; should cleanup resources" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/BERTRanker.test.ts" name="BERTRanker &gt; score combination &gt; should properly combine scores with geometric mean" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/ConfidenceCalibrator.test.ts" timestamp="2025-07-18T17:19:28.859Z" hostname="NPAMD" tests="26" failures="0" errors="0" skipped="0" time="0.026">
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; calibrate &gt; should apply temperature scaling by default" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; calibrate &gt; should handle edge values" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; calibrate &gt; should apply specified calibration method" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; calibrate &gt; should clamp values to [0, 1]" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; temperatureScaling &gt; should scale confidence with temperature parameter" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; temperatureScaling &gt; should not change 0.5 regardless of temperature" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; temperatureScaling &gt; should handle temperature = 1 (no change)" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; plattScaling &gt; should apply sigmoid transformation" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; plattScaling &gt; should preserve ordering" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; plattScaling &gt; should handle custom parameters" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; isotonicRegression &gt; should map confidence using isotonic points" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; isotonicRegression &gt; should interpolate between calibration points" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; isotonicRegression &gt; should handle values outside calibration range" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; isotonicRegression &gt; should use custom calibration points" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; batchCalibrate &gt; should calibrate multiple values" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; batchCalibrate &gt; should preserve relative ordering" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; batchCalibrate &gt; should apply specified method to all values" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; getCalibrationStats &gt; should return calibration statistics" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; getCalibrationStats &gt; should include all parameters" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; getCalibrationStats &gt; should include isotonic points" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; edge cases &gt; should handle NaN inputs" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; edge cases &gt; should handle infinite values" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; edge cases &gt; should handle very small temperature values" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; edge cases &gt; should handle empty batch" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; edge cases &gt; should validate isotonic points are monotonic" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceCalibrator.test.ts" name="ConfidenceCalibrator &gt; performance &gt; should handle large batches efficiently" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" timestamp="2025-07-18T17:19:28.869Z" hostname="NPAMD" tests="21" failures="0" errors="0" skipped="0" time="0.093">
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should build separated context by default" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should build unified context when requested" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should include confidence labels" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should format confidence as percentage only" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should format confidence as label only" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should include metadata when requested" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should exclude metadata when not requested" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should handle empty documents" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should add warning for low confidence documents" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildContext &gt; should truncate long context" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildSpecializedContext &gt; should build factual context with high confidence only" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildSpecializedContext &gt; should build explanatory context with all sources separated" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildSpecializedContext &gt; should build creative context without separation" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; buildSpecializedContext &gt; should build analytical context with full details" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; confidence guidance &gt; should show positive message for all high confidence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; confidence guidance &gt; should show warning for only low confidence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; confidence guidance &gt; should show mixed message for varied confidence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; confidence summary &gt; should calculate average confidence correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; edge cases &gt; should handle documents without metadata" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; edge cases &gt; should handle very low confidence documents" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceContextBuilder.test.ts" name="ConfidenceContextBuilder &gt; edge cases &gt; should sort documents by confidence" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/ConfidenceExtractor.test.ts" timestamp="2025-07-18T17:19:28.881Z" hostname="NPAMD" tests="18" failures="0" errors="0" skipped="0" time="0.073">
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; logProbToConfidence &gt; should convert log probabilities to confidence scores" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; logProbToConfidence &gt; should handle edge cases" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; extractTokenConfidence &gt; should extract token confidence correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; extractTokenConfidence &gt; should throw error for mismatched lengths" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; aggregateConfidence &gt; should calculate harmonic mean correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; aggregateConfidence &gt; should filter out very low confidence tokens" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; aggregateConfidence &gt; should return 0 for empty array" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; calculateWeightedConfidence &gt; should weight content words higher than stop words" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; calculateWeightedConfidence &gt; should assign low weight to punctuation" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; detectUncertaintyMarkers &gt; should detect uncertainty phrases" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; detectUncertaintyMarkers &gt; should detect contradictions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; detectUncertaintyMarkers &gt; should detect low confidence regions when token data provided" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; calculateGenerationMetrics &gt; should calculate metrics correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; calculateGenerationMetrics &gt; should handle empty input" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; estimateConfidenceFromText &gt; should estimate high confidence for assertive text" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; estimateConfidenceFromText &gt; should estimate low confidence for uncertain text" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; estimateConfidenceFromText &gt; should penalize very short responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceExtractor.test.ts" name="ConfidenceExtractor &gt; estimateConfidenceFromText &gt; should return 0 for empty text" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/ConfidenceRAGRetriever.test.ts" timestamp="2025-07-18T17:19:28.887Z" hostname="NPAMD" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/core/rag/confidence/ConfidenceRAGRetriever.test.ts" name="src/core/rag/confidence/ConfidenceRAGRetriever.test.ts" time="0">
            <failure message="
Something went wrong installing the &quot;sharp&quot; module

Cannot find module &apos;../build/Release/sharp-linux-x64.node&apos;
Require stack:
- /home/pricepro2006/CrewAI_Team/node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/sharp.js
- /home/pricepro2006/CrewAI_Team/node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/constructor.js
- /home/pricepro2006/CrewAI_Team/node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/index.js

Possible solutions:
- Install with verbose logging and look for errors: &quot;npm install --ignore-scripts=false --foreground-scripts --verbose sharp&quot;
- Install for the current linux-x64 runtime: &quot;npm install --platform=linux --arch=x64 sharp&quot;
- Consult the installation documentation: https://sharp.pixelplumbing.com/install" type="Error">
Error: 
Something went wrong installing the &quot;sharp&quot; module

Cannot find module &apos;../build/Release/sharp-linux-x64.node&apos;
Require stack:
- /home/pricepro2006/CrewAI_Team/node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/sharp.js
- /home/pricepro2006/CrewAI_Team/node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/constructor.js
- /home/pricepro2006/CrewAI_Team/node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/index.js

Possible solutions:
- Install with verbose logging and look for errors: &quot;npm install --ignore-scripts=false --foreground-scripts --verbose sharp&quot;
- Install for the current linux-x64 runtime: &quot;npm install --platform=linux --arch=x64 sharp&quot;
- Consult the installation documentation: https://sharp.pixelplumbing.com/install
 ‚ùØ Object.&lt;anonymous&gt; node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/sharp.js:37:9
 ‚ùØ TracingChannel.traceSync node:diagnostics_channel:322:14
 ‚ùØ Object.&lt;anonymous&gt; node_modules/.pnpm/sharp@0.32.6/node_modules/sharp/lib/constructor.js:11:1
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" timestamp="2025-07-18T17:19:28.889Z" hostname="NPAMD" tests="25" failures="0" errors="0" skipped="0" time="0.101">
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should generate response with log probabilities when available" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should fall back to standard generation when log probs disabled" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should adjust temperature based on confidence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should handle complex queries with lower temperature" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should use specialized context based on response type" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should handle generation errors gracefully" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should generate appropriate fallback for empty documents" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; generateWithConfidence &gt; should generate appropriate fallback for low confidence retrieval" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; prompt building &gt; should build high confidence instructions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; prompt building &gt; should build medium confidence instructions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; prompt building &gt; should build low confidence instructions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; prompt building &gt; should add complexity instructions for complex queries" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; postProcessResponse &gt; should return plain response when indicators disabled" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; postProcessResponse &gt; should add high confidence prefix" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; postProcessResponse &gt; should add medium confidence prefix" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; postProcessResponse &gt; should add low confidence prefix" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; postProcessResponse &gt; should add very low confidence prefix" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; postProcessResponse &gt; should add uncertainty warning when needed" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; analyzeResponseQuality &gt; should analyze high quality response" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; analyzeResponseQuality &gt; should detect low uncertainty" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; analyzeResponseQuality &gt; should suggest human review for low confidence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; analyzeResponseQuality &gt; should detect high uncertainty" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; temperature adjustment &gt; should maintain temperature for high confidence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; temperature adjustment &gt; should cap temperature at maximum" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/ConfidenceResponseGenerator.test.ts" name="ConfidenceResponseGenerator &gt; temperature adjustment &gt; should ensure minimum temperature" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/MultiModalEvaluator.test.ts" timestamp="2025-07-18T17:19:28.897Z" hostname="NPAMD" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/core/rag/confidence/MultiModalEvaluator.test.ts" name="src/core/rag/confidence/MultiModalEvaluator.test.ts" time="0">
            <failure message="Failed to load url ../../config/confidence.config (resolved id: ../../config/confidence.config) in /home/pricepro2006/CrewAI_Team/src/core/rag/confidence/MultiModalEvaluator.ts. Does the file exist?" type="Error">
Error: Failed to load url ../../config/confidence.config (resolved id: ../../config/confidence.config) in /home/pricepro2006/CrewAI_Team/src/core/rag/confidence/MultiModalEvaluator.ts. Does the file exist?
 ‚ùØ loadAndTransform node_modules/.pnpm/vite@5.4.19_@types+node@20.19.8/node_modules/vite/dist/node/chunks/dep-C6uTJdX2.js:51968:17
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" timestamp="2025-07-18T17:19:28.899Z" hostname="NPAMD" tests="21" failures="0" errors="0" skipped="0" time="0.025">
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; assessComplexity &gt; should assess simple queries correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; assessComplexity &gt; should assess moderate queries correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; assessComplexity &gt; should assess complex technical queries correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; assessComplexity &gt; should detect multi-intent queries" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; assessComplexity &gt; should detect ambiguous queries" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; technical term extraction &gt; should extract common technical terms" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; technical term extraction &gt; should extract programming-specific terms" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; domain detection &gt; should detect technical domain" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; domain detection &gt; should detect business domain" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; domain detection &gt; should detect multiple domains" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; question type detection &gt; should detect factual questions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; question type detection &gt; should detect explanatory questions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; question type detection &gt; should detect comparative questions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; question type detection &gt; should detect procedural questions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; complexity factors &gt; should calculate length factor correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; complexity factors &gt; should detect missing context" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; getExpectedDomains &gt; should return expected domains for a query" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; getComplexityCategory &gt; should categorize complexity correctly" time="0.001">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; edge cases &gt; should handle empty queries" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; edge cases &gt; should handle queries with only punctuation" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/QueryComplexityAnalyzer.test.ts" name="QueryComplexityAnalyzer &gt; edge cases &gt; should handle very long single words" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts" timestamp="2025-07-18T17:19:28.906Z" hostname="NPAMD" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts" name="src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts" time="0">
            <failure message="Transform failed with 2 errors:
/home/pricepro2006/CrewAI_Team/src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts:284:17: ERROR: Declarations with the name &quot;eval&quot; cannot be used in an ECMAScript module
/home/pricepro2006/CrewAI_Team/src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts:305:17: ERROR: Declarations with the name &quot;eval&quot; cannot be used in an ECMAScript module" type="Error">
Error: Transform failed with 2 errors:
/home/pricepro2006/CrewAI_Team/src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts:284:17: ERROR: Declarations with the name &quot;eval&quot; cannot be used in an ECMAScript module
/home/pricepro2006/CrewAI_Team/src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts:305:17: ERROR: Declarations with the name &quot;eval&quot; cannot be used in an ECMAScript module
 ‚ùØ failureErrorWithLog node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:1472:15
 ‚ùØ node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:755:50
 ‚ùØ responseCallbacks.&lt;computed&gt; node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:622:9
 ‚ùØ handleIncomingPacket node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:677:12
 ‚ùØ Socket.readFromStdout node_modules/.pnpm/esbuild@0.21.5/node_modules/esbuild/lib/main.js:600:7
 ‚ùØ Socket.emit node:events:518:28
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" timestamp="2025-07-18T17:19:28.908Z" hostname="NPAMD" tests="20" failures="0" errors="0" skipped="0" time="0.076">
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Cache functionality &gt; should cache results and return from cache on subsequent calls" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Cache functionality &gt; should respect TTL and refresh cache after expiry" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Cache functionality &gt; should handle cache disabled mode" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Batching functionality &gt; should batch multiple requests together" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Batching functionality &gt; should process partial batch after timeout" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Batching functionality &gt; should handle batch errors gracefully" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Batching functionality &gt; should handle batching disabled mode" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Key generation &gt; should generate consistent query keys" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Key generation &gt; should generate different keys for different inputs" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Key generation &gt; should generate consistent document keys" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Key generation &gt; should handle document order independence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Document optimization &gt; should optimize document retrieval by confidence score" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Document optimization &gt; should respect topK limit" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Token optimization &gt; should optimize token confidence by keeping high confidence tokens" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Token optimization &gt; should return all tokens if under max limit" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Model suggestion &gt; should suggest appropriate model based on complexity" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Model suggestion &gt; should return default model when model switching is disabled" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Statistics and metrics &gt; should track cache statistics" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Statistics and metrics &gt; should clear cache and reset metrics" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/__tests__/PerformanceOptimizer.test.ts" name="PerformanceOptimizer &gt; Resource monitoring &gt; should get resource metrics" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" timestamp="2025-07-18T17:19:28.915Z" hostname="NPAMD" tests="23" failures="0" errors="0" skipped="0" time="0.034">
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; analyzeCoherence &gt; should score high for well-structured responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; analyzeCoherence &gt; should score low for incoherent responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; analyzeCoherence &gt; should handle empty response" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; analyzeCoherence &gt; should handle single sentence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; checkLogicalFlow &gt; should detect good logical flow with transitions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; checkLogicalFlow &gt; should detect poor logical flow" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; checkLogicalFlow &gt; should identify transition words" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; checkLogicalFlow &gt; should handle sentences without transitions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; assessTopicConsistency &gt; should detect consistent topic focus" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; assessTopicConsistency &gt; should detect topic drift" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; assessTopicConsistency &gt; should identify main topics" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; assessTopicConsistency &gt; should handle diverse but related topics" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; calculateReadability &gt; should score high for clear, simple text" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; calculateReadability &gt; should score lower for complex text" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; calculateReadability &gt; should calculate sentence length metrics" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; calculateReadability &gt; should identify complex words" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; getCoherenceBreakdown &gt; should provide complete breakdown" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; getCoherenceBreakdown &gt; should provide improvement suggestions" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; getCoherenceBreakdown &gt; should not suggest improvements for coherent text" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; edge cases &gt; should handle text with only punctuation" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; edge cases &gt; should handle text with repeated sentences" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; edge cases &gt; should handle text with unicode characters" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/CoherenceAnalyzer.test.ts" name="CoherenceAnalyzer &gt; edge cases &gt; should handle very long sentences" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" timestamp="2025-07-18T17:19:28.923Z" hostname="NPAMD" tests="18" failures="0" errors="0" skipped="0" time="0.051">
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; checkFactuality &gt; should score high for responses supported by sources" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; checkFactuality &gt; should score low for unsupported claims" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; checkFactuality &gt; should handle empty response" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; checkFactuality &gt; should handle empty sources" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; extractClaims &gt; should extract individual claims from response" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; extractClaims &gt; should handle single sentence" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; extractClaims &gt; should filter out very short sentences" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; extractClaims &gt; should handle questions and exclamations" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; verifyClaim &gt; should verify exact matches" time="0.003">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; verifyClaim &gt; should verify partial matches" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; verifyClaim &gt; should give low score for unverifiable claims" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; verifyClaim &gt; should handle keyword overlap" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; calculateSupport &gt; should calculate high support for well-sourced responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; calculateSupport &gt; should identify unsupported claims" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; calculateSupport &gt; should provide detailed support breakdown" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; edge cases &gt; should handle responses with only punctuation" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; edge cases &gt; should handle very long responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/FactualityChecker.test.ts" name="FactualityChecker &gt; edge cases &gt; should handle responses with special characters" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" timestamp="2025-07-18T17:19:28.930Z" hostname="NPAMD" tests="22" failures="0" errors="0" skipped="0" time="0.061">
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; scoreRelevance &gt; should score high for directly relevant responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; scoreRelevance &gt; should score low for irrelevant responses" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; scoreRelevance &gt; should handle empty query" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; scoreRelevance &gt; should handle empty response" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; scoreRelevance &gt; should handle partial relevance" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; calculateSemanticSimilarity &gt; should calculate high similarity for related texts" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; calculateSemanticSimilarity &gt; should calculate low similarity for unrelated texts" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; calculateSemanticSimilarity &gt; should handle identical texts" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; calculateSemanticSimilarity &gt; should be case insensitive" time="0.001">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; assessQueryCoverage &gt; should detect full query coverage" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; assessQueryCoverage &gt; should identify missed query terms" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; assessQueryCoverage &gt; should handle question words appropriately" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; assessQueryCoverage &gt; should calculate coverage ratio correctly" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; detectAnswerType &gt; should detect definition answers" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; detectAnswerType &gt; should detect explanation answers" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; detectAnswerType &gt; should detect list answers" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; detectAnswerType &gt; should detect comparison answers" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; detectAnswerType &gt; should default to general for unclear types" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; edge cases &gt; should handle very short inputs" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; edge cases &gt; should handle special characters" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; edge cases &gt; should handle multilingual content gracefully" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/RelevanceScorer.test.ts" name="RelevanceScorer &gt; edge cases &gt; should handle very long texts" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/core/rag/confidence/evaluators/integration.test.ts" timestamp="2025-07-18T17:19:28.937Z" hostname="NPAMD" tests="7" failures="0" errors="0" skipped="0" time="0.118">
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; FactualityChecker &gt; should have checkFactuality method" time="0.001">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; FactualityChecker &gt; should return factuality score" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; RelevanceScorer &gt; should have calculateRelevance method" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; RelevanceScorer &gt; should return relevance result" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; CoherenceAnalyzer &gt; should have evaluateCoherence method" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; CoherenceAnalyzer &gt; should return coherence result" time="0">
        </testcase>
        <testcase classname="src/core/rag/confidence/evaluators/integration.test.ts" name="Confidence Evaluators Integration &gt; Combined evaluation &gt; should work together for complete evaluation" time="0">
        </testcase>
    </testsuite>
</testsuites>
