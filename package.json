{
  "name": "ai-agent-team",
  "version": "1.0.0",
  "description": "AI Agent Team Framework - Local-first multi-agent orchestration system",
  "main": "dist/api/server.js",
  "type": "module",
  "scripts": {
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:alt": "./scripts/dev.sh",
    "dev-server": "VITE_PORT=5178 concurrently \"npm run dev:server\" \"npm run dev:client:walmart\"",
    "dev:server": "NODE_OPTIONS='--import tsx --experimental-specifier-resolution=node' tsx src/api/server.ts",
    "dev:client": "vite",
    "dev:client:walmart": "VITE_PORT=5178 vite --open=/walmart",
    "build": "npm run build:client && npm run build:server",
    "build:client": "vite build",
    "build:server": "tsc -p config/typescript/tsconfig.server.json",
    "build:production": "./scripts/build-production.sh",
    "build:production:fast": "NODE_ENV=production npm run build:client && npm run build:server:production && npm run fix:esm",
    "build:server:production": "tsc -p config/typescript/tsconfig.build.json",
    "fix:esm": "node scripts/fix-esm-imports.js",
    "build:docker": "npm run build:client && npm run build:server:docker",
    "build:server:docker": "tsc -p config/typescript/tsconfig.server.json --noEmitOnError false",
    "start": "node dist/api/server.js",
    "init:db": "tsx scripts/init-db.ts",
    "init:production-db": "tsx scripts/init-production-db.ts",
    "migrate": "tsx scripts/run-migrations.ts",
    "db:migrate": "tsx src/scripts/runDatabaseMigrations.ts migrate",
    "db:rollback": "tsx src/scripts/runDatabaseMigrations.ts rollback",
    "db:status": "tsx src/scripts/runDatabaseMigrations.ts status",
    "db:admin": "tsx scripts/database-admin-tools.ts",
    "db:backup": "./scripts/database-backup.sh",
    "db:backup:validate": "./scripts/database-backup.sh --validate",
    "db:backup:cleanup": "./scripts/database-backup.sh --cleanup",
    "db:performance": "tsx scripts/database-admin-tools.ts performance-report",
    "db:chains": "tsx scripts/database-admin-tools.ts analyze-chains",
    "db:maintenance": "tsx scripts/database-admin-tools.ts maintenance",
    "test:integration": "vitest run --config vitest.integration.config.ts",
    "test:unit": "NODE_OPTIONS='--max-old-space-size=4096' vitest run",
    "test:ui": "NODE_OPTIONS='--max-old-space-size=2048 --gc-interval=100' vitest run --config vitest.ui.config.ts",
    "test:setup": "docker-compose -f docker-compose.test.yml up -d",
    "test:teardown": "docker-compose -f docker-compose.test.yml down -v",
    "test:wait": "timeout 60 bash -c 'until curl -f http://localhost:8001/api/v2/version 2>/dev/null; do sleep 2; done' || echo 'ChromaDB not available - some tests will be skipped'",
    "test:full": "npm run test:setup && npm run test:wait && npm run test && npm run test:teardown",
    "start:ollama": "bash scripts/start-ollama.sh",
    "populate-kb": "tsx src/scripts/populate-knowledge-base.ts",
    "test": "NODE_OPTIONS='--max-old-space-size=4096 --optimize-for-size' vitest",
    "test:e2e": "playwright test --config playwright.e2e.config.ts",
    "test:e2e:headed": "playwright test --config playwright.e2e.config.ts --headed",
    "test:e2e:walmart": "playwright test --config playwright.e2e.config.ts --grep walmart",
    "test:e2e:debug": "playwright test --config playwright.e2e.config.ts --debug",
    "test:e2e:report": "playwright show-report playwright-report-e2e",
    "test:browser-compat": "tsx scripts/run-browser-compatibility-tests.ts",
    "test:browser-compat:headed": "tsx scripts/run-browser-compatibility-tests.ts --headed",
    "test:browser-compat:chrome": "tsx scripts/run-browser-compatibility-tests.ts --chrome-only",
    "test:browser-compat:firefox": "tsx scripts/run-browser-compatibility-tests.ts --firefox-only",
    "test:browser-compat:safari": "tsx scripts/run-browser-compatibility-tests.ts --safari-only",
    "test:browser-compat:edge": "tsx scripts/run-browser-compatibility-tests.ts --edge-only",
    "test:browser-compat:sequential": "tsx scripts/run-browser-compatibility-tests.ts --sequential",
    "test:walmart-browsers": "playwright test --config playwright.config.ts --grep walmart",
    "test:walmart-comprehensive": "playwright test --config=playwright.simple.config.ts",
    "test:walmart-comprehensive:headed": "playwright test --config=playwright.simple.config.ts --headed",
    "test:walmart-comprehensive:high": "playwright test tests/walmart-ui-comprehensive/*.spec.ts --headed --grep high",
    "test:walmart-comprehensive:cleanup": "tsx tests/walmart-ui-comprehensive/run-all-tests.ts --cleanup",
    "test:walmart-ui": "playwright test tests/walmart-ui-comprehensive/walmart-ui-comprehensive.spec.ts --headed",
    "test:walmart-search": "playwright test tests/walmart-ui-comprehensive/walmart-search-functionality.spec.ts --headed",
    "test:walmart-websocket": "playwright test tests/walmart-ui-comprehensive/walmart-websocket-integration.spec.ts --headed",
    "test:walmart-api": "playwright test tests/walmart-ui-comprehensive/walmart-api-integration.spec.ts --headed",
    "test:walmart-data": "playwright test tests/walmart-ui-comprehensive/walmart-data-validation.spec.ts --headed",
    "test:all": "npm run test:full && npm run test:integration && npm run test:e2e && npm run test:browser-compat",
    "test:ci": "npm run test:unit && npm run test:ui",
    "test:ci:memory-safe": "npm run test:unit && sleep 10 && npm run test:ui",
    "test:ci:memory-safe:coverage": "NODE_OPTIONS='--max-old-space-size=4096' vitest run --coverage && sleep 10 && npm run test:ui",
    "lint": "eslint src --ext .ts,.tsx",
    "lint:fix": "eslint src --ext .ts,.tsx --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,json,css}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,json,css}\"",
    "typecheck": "tsc --noEmit",
    "test:coverage": "NODE_OPTIONS='--max-old-space-size=4096 --optimize-for-size' vitest run --coverage",
    "optimize:grocery-db": "tsx scripts/apply-grocery-performance-optimization.ts",
    "db:rollback:grocery-optimization": "sqlite3 data/app.db < database/migrations/rollback-008-grocery-optimization.sql",
    "prepare": "husky",
    "test:related": "echo 'Skipping related tests in pre-commit for performance'",
    "test:watch": "NODE_OPTIONS='--max-old-space-size=4096 --optimize-for-size' vitest watch",
    "approve-builds": "echo \"Skipping native builds approval\"",
    "monitor:cache": "tsx scripts/monitor-cache.ts",
    "process-emails": "tsx src/scripts/email-batch-processor.ts --",
    "pipeline:test": "tsx src/scripts/test-pipeline-small-batch.ts",
    "process:optimized": "tsx scripts/process-emails-optimized.ts",
    "monitor:performance": "tsx scripts/monitor-email-performance.ts",
    "benchmark:phase2": "tsx scripts/benchmark-phase2.ts",
    "stress:test": "tsx scripts/stress-test-pipeline.ts",
    "quality:test": "tsx src/core/services/QualityValidationFramework.test.ts",
    "quality:config": "tsx scripts/configure-quality-framework.ts",
    "quality:monitor": "tsx scripts/configure-quality-framework.ts monitor",
    "quality:profile": "tsx scripts/configure-quality-framework.ts profile",
    "pipeline:execute": "tsx src/scripts/run-three-stage-pipeline.ts",
    "pipeline:execute:prod": "tsx src/scripts/execute-pipeline-production.ts",
    "pipeline:monitor": "tsx src/scripts/monitor-pipeline.ts",
    "pipeline:analyze:chains": "tsx scripts/analyze-chain-completeness.ts",
    "pipeline:analyze:patterns": "tsx scripts/analyze-email-patterns.ts",
    "pipeline:analyze:workflows": "tsx scripts/analyze-workflow-quality.ts",
    "pipeline:analyze:dashboard": "tsx scripts/run-email-analysis-dashboard.ts",
    "test:production:integration": "vitest run --config vitest.production.config.ts tests/production/email-pipeline-integration.test.ts",
    "test:production:load": "vitest run --config vitest.production.config.ts tests/production/load-test-email-pipeline.ts",
    "test:production:deployment": "./scripts/test-production-deployment.sh",
    "test:production:all": "npm run test:production:integration && npm run test:production:load && npm run test:production:deployment",
    "test:production:coverage": "vitest run --config vitest.production.config.ts --coverage",
    "test:production:ci": "npm run test:production:deployment && npm run test:production:integration && npm run test:production:load",
    "test:microservices": "./tests/integration/run-all-integration-tests.sh",
    "test:microservices:parallel": "./tests/integration/run-all-integration-tests.sh --parallel",
    "test:microservices:sequential": "./tests/integration/run-all-integration-tests.sh --sequential",
    "test:microservices:critical": "./tests/integration/run-all-integration-tests.sh --critical-only",
    "test:microservices:performance": "vitest run tests/integration/performance-benchmarks.test.ts --config vitest.integration.config.ts",
    "test:microservices:core": "vitest run tests/integration/microservices-integration.test.ts --config vitest.integration.config.ts",
    "test:microservices:edge-cases": "vitest run tests/integration/edge-cases-error-scenarios.test.ts --config vitest.integration.config.ts",
    "test:microservices:websocket": "vitest run tests/integration/websocket-integration.test.ts --config vitest.integration.config.ts",
    "test:microservices:report": "tsx tests/integration/run-integration-tests.ts --parallel --report",
    "test:microservices:ci": "./tests/integration/run-all-integration-tests.sh --critical-only --no-report",
    "db:migrate:production": "NODE_ENV=production tsx src/scripts/runDatabaseMigrations.ts migrate",
    "db:optimize": "./scripts/optimize-databases.sh",
    "import:iems-emails": "tsx scripts/import-iems-email-batches.ts",
    "import:iems-emails:test": "tsx scripts/import-iems-email-batches.ts --test",
    "create-enhanced-schema": "tsx scripts/create-enhanced-email-schema.ts",
    "install:workaround": "./scripts/install-workaround.sh",
    "install:patch": "node scripts/patch-install.js",
    "pipeline:start": "./scripts/start-email-pipeline.sh",
    "test:critical-fixes": "tsx scripts/run-critical-fixes-validation.ts",
    "test:json-parsing": "vitest run src/core/services/EmailThreePhaseAnalysisService.enhanced.test.ts",
    "test:chain-scoring": "vitest run src/core/services/EmailChainAnalyzer.regression.test.ts",
    "test:integration-fixes": "vitest run src/core/services/EmailPipeline.integration.test.ts",
    "validate:fixes": "npm run test:critical-fixes",
    "optimize-ollama": "tsx scripts/optimize-ollama-setup.ts",
    "process-emails-optimized": "tsx scripts/process-emails-optimized.ts",
    "benchmark-ollama": "tsx scripts/benchmark-ollama.ts",
    "process-emails-phase2": "tsx scripts/process-emails-phase2-optimized.ts",
    "process-emails-phase2-simple": "tsx scripts/process-emails-phase2-simple.ts",
    "process-emails-phase2-direct": "tsx scripts/process-emails-phase2-direct.ts",
    "process-emails-phase2-batch": "tsx scripts/process-emails-phase2-batch.ts",
    "process-emails-phase2-production": "tsx scripts/process-emails-phase2-production.ts",
    "process-emails-phase2-fast": "tsx scripts/process-emails-phase2-fast.ts",
    "benchmark:performance": "tsx scripts/performance-benchmark.ts",
    "serve:production": "NODE_ENV=production node dist/api/server.js",
    "docker:build": "docker build -f Dockerfile.production -t walmart-grocery-agent:latest .",
    "docker:run": "docker run -p 3000:3000 --env-file .env walmart-grocery-agent:latest",
    "local:setup": "./dev-quick-start.sh",
    "local:services": "./local-services.sh",
    "local:backup": "./scripts/simple-backup.sh",
    "local:optimize": "./memory-optimize.sh",
    "local:health": "./local-services.sh health",
    "start:pricing-service": "NODE_OPTIONS='--loader tsx --experimental-specifier-resolution=node' tsx src/microservices/pricing-service/server.ts",
    "dev:pricing-service": "NODE_OPTIONS='--loader tsx --experimental-specifier-resolution=node' tsx src/microservices/pricing-service/server.ts",
    "test:pricing-service": "vitest run src/microservices/pricing-service/__tests__/",
    "build:prod": "./scripts/build-optimized.sh",
    "perf:report": "tsx src/scripts/performance-report-generator.ts",
    "perf:analyze": "tsx src/scripts/simple-frontend-analysis.ts",
    "monitor": "tsx src/scripts/performance-dashboard.ts"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "@heroicons/react": "^2.2.0",
    "@sentry/node": "^7.120.4",
    "@sentry/profiling-node": "^1.3.1",
    "@sentry/tracing": "^7.100.0",
    "@tanstack/react-query": "^4.40.1",
    "@tanstack/react-table": "^8.21.3",
    "@trpc/client": "^10.45.0",
    "@trpc/react-query": "^10.45.0",
    "@trpc/server": "^10.45.0",
    "@types/compression": "^1.8.1",
    "@types/multer": "^2.0.0",
    "@types/node-fetch": "^2.6.13",
    "bcrypt": "^5.1.1",
    "better-sqlite3": "^9.3.0",
    "bullmq": "^5.56.4",
    "chart.js": "^4.5.0",
    "cheerio": "^1.0.0-rc.12",
    "chromadb": "^1.7.3",
    "clsx": "^2.1.1",
    "compression": "^1.8.1",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^16.3.1",
    "eventemitter3": "^5.0.1",
    "express": "^4.18.2",
    "express-rate-limit": "^8.0.1",
    "form-data": "^4.0.4",
    "helmet": "^7.1.0",
    "immer": "^10.1.1",
    "ioredis": "^5.3.2",
    "jsonwebtoken": "^9.0.2",
    "lru-cache": "^11.1.0",
    "lucide-react": "^0.525.0",
    "multer": "^2.0.2",
    "node-cron": "^3.0.3",
    "node-fetch": "^3.3.2",
    "ollama": "^0.5.16",
    "p-queue": "^8.0.1",
    "prom-client": "^15.1.0",
    "rate-limit-redis": "^4.2.1",
    "react": "^18.2.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.21.0",
    "react-window": "^1.8.8",
    "recharts": "^3.1.0",
    "sqlite3": "^5.1.7",
    "superjson": "^2.2.2",
    "tailwind-merge": "^3.3.1",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "winston-daily-rotate-file": "^5.0.0",
    "winston-elasticsearch": "^0.19.0",
    "ws": "^8.16.0",
    "xlsx": "https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz",
    "zod": "^3.22.4",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "@modelcontextprotocol/sdk": "^1.16.0",
    "@playwright/test": "^1.41.0",
    "@radix-ui/react-slot": "^1.2.3",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/bcrypt": "^5.0.2",
    "@types/better-sqlite3": "^7.6.8",
    "@types/commander": "^2.12.5",
    "@types/cookie-parser": "^1.4.9",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/node": "^20.11.0",
    "@types/qs": "^6.9.16",
    "@types/react": "^18.2.47",
    "@types/react-dom": "^18.2.18",
    "@types/react-window": "^1.8.8",
    "@types/socket.io": "^3.0.2",
    "@types/socket.io-client": "^3.0.0",
    "@types/supertest": "^6.0.2",
    "@types/uuid": "^9.0.7",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^6.19.0",
    "@typescript-eslint/parser": "^6.19.0",
    "@vitejs/plugin-react": "^4.2.1",
    "@vitest/coverage-v8": "^3.2.4",
    "autoprefixer": "^10.4.16",
    "axios": "^1.6.5",
    "chalk": "^5.3.0",
    "class-variance-authority": "^0.7.1",
    "cli-progress": "^3.12.0",
    "cli-table3": "^0.6.3",
    "commander": "^14.0.0",
    "concurrently": "^8.2.2",
    "eslint": "^8.56.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "husky": "^9.1.7",
    "jest-websocket-mock": "^2.5.0",
    "jsdom": "^26.1.0",
    "lint-staged": "^16.1.2",
    "msw": "^2.10.4",
    "msw-trpc": "^1.3.4",
    "p-limit": "^5.0.0",
    "playwright": "^1.54.1",
    "postcss": "^8.4.33",
    "prettier": "^3.2.4",
    "socket.io": "^4.7.0",
    "socket.io-client": "^4.7.0",
    "supertest": "^6.3.4",
    "tailwindcss": "^3.4.1",
    "tsx": "^4.7.0",
    "typescript": "^5.3.3",
    "vite": "^7.0.6",
    "vite-tsconfig-paths": "^5.1.4",
    "vitest": "^3.2.4"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "exports": {
    ".": {
      "import": "./dist/api/server.js",
      "types": "./dist/api/server.d.ts"
    },
    "./package.json": "./package.json"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/ai-agent-team.git"
  },
  "keywords": [
    "ai",
    "agents",
    "ollama",
    "rag",
    "typescript",
    "trpc",
    "react",
    "local-ai"
  ],
  "author": "Your Name",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yourusername/ai-agent-team/issues"
  },
  "homepage": "https://github.com/yourusername/ai-agent-team#readme"
}