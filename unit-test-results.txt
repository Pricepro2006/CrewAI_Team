
> ai-agent-team@1.0.0 test:unit /home/pricepro2006/CrewAI_Team
> vitest run


 RUN  v3.2.4 /home/pricepro2006/CrewAI_Team

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification
✅ Ollama is available

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification > should verify Ollama requests complete within 30 seconds

❌ Ollama Timeout Verification
   Duration: 0ms
   Details: Failed to complete within timeout
   Error: [object Object]

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification > should start production server successfully
Building server...

 ❯ src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts (14 tests | 13 failed) 10051ms
   × BusinessSearchMiddleware - Caching Integration > Cache Hit Scenarios > should return cached response on second request 12ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:63:25
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache Hit Scenarios > should emit cache_hit event 3ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:86:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache Hit Scenarios > should respect location in cache key 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:103:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache Miss Scenarios > should not cache non-business queries 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:124:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   ✓ BusinessSearchMiddleware - Caching Integration > Cache Miss Scenarios > should not use cache when disabled 2ms
   × BusinessSearchMiddleware - Caching Integration > Cache Performance > should significantly reduce latency for cached responses 10003ms
     → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × BusinessSearchMiddleware - Caching Integration > Cache Performance > should track cache performance metrics 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:190:9
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache Management > should clear cache on demand 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:211:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache Management > should preload common queries 8ms
     → expected '24/7 electricians...' to be 'Emergency plumbers...' // Object.is equality
   × BusinessSearchMiddleware - Caching Integration > Cache Management > should analyze cache performance 3ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:262:9
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache Management > should search cache entries 3ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:276:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache with Validation > should only cache valid responses 3ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:312:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Cache with Rate Limiting > should not cache rate-limited requests 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:333:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Caching Integration > Streaming with Cache > should not use cache for streaming requests 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.caching.test.ts:355:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
stdout | src/database/tests/ConnectionPool.test.ts > ConnectionPool Performance > should handle high query volume efficiently
Performance: Infinity queries/second

 ❯ src/database/tests/ConnectionPool.test.ts (15 tests | 4 failed) 10420ms
   ✓ DatabaseConnectionPool > should create singleton instance 2ms
   × DatabaseConnectionPool > should provide thread-safe connections 8ms
     → expected { id: 1, subject: 'Test Email', …(3) } to deeply equal { test: 1 }
   ✓ DatabaseConnectionPool > should track connection metrics 1ms
   × DatabaseConnectionPool > should handle transactions correctly 2ms
     → fn is not a function
   ✓ DatabaseConnectionPool > should provide health check functionality 1ms
   × DatabaseConnectionPool > should handle connection cleanup 10002ms
     → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ DatabaseConnectionPool > should handle errors gracefully 1ms
   ✓ DatabaseConnectionPool > should handle concurrent operations 2ms
   ✓ DatabaseConnectionPool > should provide detailed connection metrics 1ms
   ✓ DatabaseConnectionPool > should handle graceful shutdown 2ms
   × ConnectionPool Integration > should work with DatabaseManager 264ms
     → Database integrity validation failed
   ✓ ConnectionPool Integration > should work with EmailThreePhaseAnalysisService 123ms
   ✓ ConnectionPool Integration > should work with EmailChainAnalyzer 0ms
   ✓ ConnectionPool Performance > should handle high query volume efficiently 8ms
   ✓ ConnectionPool Performance > should maintain reasonable memory usage 2ms
stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification > should start production server successfully

❌ Production Server Startup
   Duration: 0ms
   Details: Failed to start production server
   Error: Build failed with code 2

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification > should test MasterOrchestrator with real Ollama integration

❌ MasterOrchestrator Integration
   Duration: 0ms
   Details: Failed to complete orchestrator test

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification > should verify error handling and fallback mechanisms

❌ Error Handling & Fallbacks
   Duration: 0ms
   Details: Failed to verify error handling

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification > should measure and verify performance metrics

❌ Performance Metrics
   Duration: 0ms
   Details: Failed to complete performance tests

stdout | src/test/system/critical-issues-verification.test.ts > Critical Issues Verification

📄 Final report saved to: /home/pricepro2006/CrewAI_Team/CRITICAL_ISSUES_RESOLVED.md

⚠️ Summary: 0/5 tests passed

 ❯ src/test/system/critical-issues-verification.test.ts (5 tests | 5 failed) 13771ms
   × Critical Issues Verification > should verify Ollama requests complete within 30 seconds 5ms
     → undefined
   × Critical Issues Verification > should start production server successfully 13759ms
     → Build failed with code 2
   × Critical Issues Verification > should test MasterOrchestrator with real Ollama integration 1ms
     → undefined
   × Critical Issues Verification > should verify error handling and fallback mechanisms 1ms
     → undefined
   × Critical Issues Verification > should measure and verify performance metrics 1ms
     → undefined
 ❯ src/core/middleware/__tests__/BusinessSearchMiddleware.test.ts (24 tests | 4 failed) 5100ms
   ✓ BusinessSearchMiddleware > Provider Wrapping > should return original provider when feature is disabled 5ms
   ✓ BusinessSearchMiddleware > Provider Wrapping > should wrap provider when feature is enabled 3ms
   ✓ BusinessSearchMiddleware > Provider Wrapping > should pass through non-intercepted methods 2ms
   ✓ BusinessSearchMiddleware > Business Query Detection > should enhance business-related queries 11ms
   × BusinessSearchMiddleware > Business Query Detection > should not enhance non-business queries 15ms
     → expected "spy" to be called with arguments: [ Array(2) ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[32m-   "What is the meaning of life?",[90m
[31m+   "[90m
[31m+ [BUSINESS_SEARCH_INSTRUCTIONS][90m
[31m+ IMPORTANT: For ANY business-related query, you MUST:[90m
[31m+ 1. Use WebSearch to find current business information[90m
[31m+ 2. Provide specific details including:[90m
[31m+    - Business name and type[90m
[31m+    - Phone number(s)[90m
[31m+    - Physical address[90m
[31m+    - Business hours[90m
[31m+    - Website/email if available[90m
[31m+    - Current status (open/closed)[90m
[31m+ 3. Never suggest users \"search online\" - YOU do the searching[90m
[31m+ 4. Verify information is current (check last updated dates)[90m
[31m+[90m
[31m+[90m
[31m+ EXAMPLES OF PROPER BUSINESS INFORMATION RESPONSES:[90m
[31m+[90m
[31m+ Example 1:[90m
[31m+ ✓ GOOD: \"Joe's Plumbing - (555) 123-4567, 123 Main St, Open 24/7\"[90m
[31m+ ✗ BAD: \"Search online for plumbers in your area\"[90m
[31m+ Reason: Provide specific, actionable business information with contact details[90m
[31m+[90m
[31m+ Example 2:[90m
[31m+ ✓ GOOD: \"TechCorp Solutions - support@techcorp.com, Live chat: techcorp.com/chat, Phone: (800) 555-TECH\"[90m
[31m+ ✗ BAD: \"Look up tech support companies\"[90m
[31m+ Reason: Include multiple contact methods and clear business identification[90m
[31m+[90m
[31m+ Example 3:[90m
[31m+ ✓ GOOD: \"City Auto Repair - 456 Oak Ave, Hours: Mon-Fri 8AM-6PM, Sat 9AM-3PM, Walk-ins welcome\"[90m
[31m+ ✗ BAD: \"Find auto repair shops nearby\"[90m
[31m+ Reason: Provide location, hours, and service availability details[90m
[31m+[90m
[31m+[90m
[31m+ [BUSINESS_SEARCH_ENHANCED][90m
[31m+[90m
[31m+ --- Original Prompt ---[90m
[31m+ What is the meaning of life?[90m
[31m+ [Enhancement Metadata: Level=standard, Timestamp=2025-08-03T19:44:32.350Z]",[90m
[2m    undefined,[22m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m
   ✓ BusinessSearchMiddleware > Business Query Detection > should skip enhancement for already enhanced prompts 2ms
   ✓ BusinessSearchMiddleware > Response Validation > should validate responses with business information 3ms
   ✓ BusinessSearchMiddleware > Response Validation > should track failed validations 3ms
   × BusinessSearchMiddleware > Performance Monitoring > should track latency 3ms
     → expected 0 to be greater than 0
   × BusinessSearchMiddleware > Performance Monitoring > should emit high latency warning 5003ms
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × BusinessSearchMiddleware > Circuit Breaker > should open circuit breaker after threshold failures 5ms
     → expected 'closed' to be 'open' // Object.is equality
   ✓ BusinessSearchMiddleware > Circuit Breaker > should bypass middleware when circuit breaker is open 3ms
   ✓ BusinessSearchMiddleware > A/B Testing > should respect rollout percentage 15ms
   ✓ BusinessSearchMiddleware > generateWithLogProbs > should enhance prompts in generateWithLogProbs 2ms
   ✓ BusinessSearchMiddleware > generateWithLogProbs > should preserve log probabilities 2ms
   ✓ BusinessSearchMiddleware > generateStream > should enhance prompts in generateStream 2ms
   ✓ BusinessSearchMiddleware > generateStream > should validate complete streamed response 2ms
   ✓ BusinessSearchMiddleware > Metrics and Monitoring > should accurately track all metrics 2ms
   ✓ BusinessSearchMiddleware > Metrics and Monitoring > should reset metrics correctly 1ms
   ✓ BusinessSearchMiddleware > Configuration > should update configuration dynamically 2ms
   ✓ BusinessSearchMiddleware > Configuration > should respect bypass patterns 2ms
   ✓ BusinessSearchMiddleware > Configuration > should respect force enhance patterns 3ms
   ✓ BusinessSearchMiddleware > Error Handling > should handle provider errors gracefully 5ms
   ✓ BusinessSearchMiddleware > Error Handling > should emit error events 2ms
 ❯ src/api/trpc/__tests__/rateLimiting.test.ts (16 tests | 2 failed) 20029ms
   ✓ TRPC Rate Limiting > Rate Limit Middleware > should allow requests within rate limit 3ms
   ✓ TRPC Rate Limiting > Rate Limit Middleware > should block requests exceeding rate limit 2ms
   ✓ TRPC Rate Limiting > Rate Limit Middleware > should apply different limits for different user types 1ms
   ✓ TRPC Rate Limiting > Rate Limit Middleware > should give admin users higher limits 1ms
   × TRPC Rate Limiting > Rate Limit Middleware > should clean up expired rate limit entries 10007ms
     → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ TRPC Rate Limiting > Rate Limit Middleware > should use different keys for different users 1ms
   ✓ TRPC Rate Limiting > Procedure-Specific Rate Limits > should apply chat-specific rate limits 1ms
   ✓ TRPC Rate Limiting > Procedure-Specific Rate Limits > should apply agent-specific rate limits 2ms
   ✓ TRPC Rate Limiting > Procedure-Specific Rate Limits > should apply task-specific rate limits 1ms
   ✓ TRPC Rate Limiting > Procedure-Specific Rate Limits > should apply RAG-specific rate limits 1ms
   ✓ TRPC Rate Limiting > Procedure-Specific Rate Limits > should apply strict rate limits for sensitive operations 1ms
   ✓ TRPC Rate Limiting > Rate Limit Error Handling > should throw TRPCError with correct code when rate limited 3ms
   ✓ TRPC Rate Limiting > Rate Limit Error Handling > should include helpful error message with procedure name 2ms
   ✓ TRPC Rate Limiting > Rate Limit Logging > should log rate limit violations 2ms
   ✓ TRPC Rate Limiting > Rate Limit Logging > should log successful rate limit checks in debug mode 1ms
   × TRPC Rate Limiting > Memory Management > should limit memory usage by cleaning old entries 10001ms
     → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | src/tests/critical-fixes-validation.test.ts > CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring
🔍 STARTING CRITICAL FIXES VALIDATION SUITE
============================================================

stdout | src/tests/critical-fixes-validation.test.ts > CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 🔧 JSON PARSING FIXES VALIDATION > should handle all problematic LLM response formats identified in production
✅ JSON Parsing: Handled 3 problematic formats

 ❯ src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts (11 tests | 9 failed) 10053ms
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting Behavior > should apply rate limiting to business search queries 13ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:58:25
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting Behavior > should track rate limited requests in metrics 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:77:24
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting Behavior > should emit rate_limited event when rate limit is hit 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:100:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting Behavior > should continue processing if rate limit check fails 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:121:24
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting Behavior > should use different rate limit keys for different queries 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:137:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting Behavior > should respect rate limits in streaming mode 6ms
     → expected "spy" to be called with arguments: [ 'Find mechanics nearby', …(2) ][90m

Received: 

[1m  1st spy call:

[22m[2m  [[22m
[2m    "Find mechanics nearby",[22m
[2m    undefined,[22m
[32m-   [Function spy],[90m
[31m+   [Function anonymous],[90m
[2m  ][22m
[39m[90m

Number of calls: [1m1[22m
[39m
   × BusinessSearchMiddleware - Rate Limiting Integration > Rate Limiting with Circuit Breaker > should bypass rate limiting when circuit breaker is open 2ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:182:7
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'half-open'
})
   × BusinessSearchMiddleware - Rate Limiting Integration > Performance Impact > should track latency including rate limit checks 10003ms
     → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ BusinessSearchMiddleware - Rate Limiting Integration > Configuration > should allow updating rate limit configuration 6ms
   × BusinessSearchMiddleware - Rate Limiting Integration > Metrics Tracking > should accurately track rate limited vs total requests 9ms
     → Unhandled error. ({
  error: TypeError: provider.getConfig is not a function
      at Proxy.<anonymous> (/home/pricepro2006/CrewAI_Team/src/core/middleware/BusinessSearchMiddleware.ts:266:35)
      at /home/pricepro2006/CrewAI_Team/src/core/middleware/__tests__/BusinessSearchMiddleware.rateLimiting.test.ts:236:9
      at file:///home/pricepro2006/CrewAI_Team/node_modules/.pnpm/@vitest+runner@3.2.4/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20,
  circuitBreakerStatus: 'closed'
})
   ✓ BusinessSearchMiddleware - Rate Limiting Integration > Metrics Tracking > should reset rate limited count with resetMetrics 4ms
 ❯ src/core/services/__tests__/EmailIngestionService.test.ts (55 tests | 6 failed) 676ms
   ✓ EmailIngestionService > Initialization > should initialize successfully with valid configuration 3ms
   ✓ EmailIngestionService > Initialization > should validate required configuration 1ms
   ✓ EmailIngestionService > Single Email Ingestion > should ingest a single email successfully 2ms
   ✓ EmailIngestionService > Single Email Ingestion > should detect duplicate emails 1ms
   ✓ EmailIngestionService > Single Email Ingestion > should handle processing errors gracefully 3ms
   ✓ EmailIngestionService > Single Email Ingestion > should calculate priority correctly 3ms
   ✓ EmailIngestionService > Batch Email Ingestion > should ingest multiple emails in batch 7ms
   ✓ EmailIngestionService > Batch Email Ingestion > should handle mixed success/failure in batch 14ms
   ✓ EmailIngestionService > Batch Email Ingestion > should calculate throughput correctly 3ms
   ✓ EmailIngestionService > JSON File Ingestion > should handle valid JSON file 4ms
   ✓ EmailIngestionService > JSON File Ingestion > should handle invalid JSON file 2ms
   ✓ EmailIngestionService > Queue Management > should pause and resume ingestion 2ms
   ✓ EmailIngestionService > Queue Management > should get queue status 2ms
   ✓ EmailIngestionService > Queue Management > should retry failed jobs 2ms
   ✓ EmailIngestionService > Deduplication > should detect duplicates correctly 2ms
   ✓ EmailIngestionService > Deduplication > should clear deduplication cache 6ms
   ✓ EmailIngestionService > Auto-Pull Management > should start auto-pull successfully 2ms
   ✓ EmailIngestionService > Auto-Pull Management > should stop auto-pull successfully 2ms
   ✓ EmailIngestionService > Metrics and Monitoring > should provide metrics 2ms
   ✓ EmailIngestionService > Metrics and Monitoring > should provide recent errors 1ms
   ✓ EmailIngestionService > Metrics and Monitoring > should perform health check 2ms
   ✓ EmailIngestionService > Error Handling > should handle Redis connection failures gracefully 2ms
   ✓ EmailIngestionService > Error Handling > should handle database connection failures gracefully 2ms
   ✓ EmailIngestionService > Error Handling > should handle queue overflow scenarios 2ms
   ✓ EmailIngestionService > Error Handling > should handle network timeout errors 3ms
   ✓ EmailIngestionService > Error Handling > should handle malformed email data 3ms
   ✓ EmailIngestionService > Error Handling > should handle Redis memory pressure 3ms
   × EmailIngestionService > Error Handling > should handle worker crash scenarios 10ms
     → promise rejected "Error: Worker crashed unexpectedly" instead of resolving
   ✓ EmailIngestionService > Error Handling > should handle concurrent duplicate detection race conditions 3ms
   ✓ EmailIngestionService > Error Handling > should handle extremely large email content 21ms
   ✓ EmailIngestionService > Performance and Stress Tests > should meet 60+ emails/minute throughput requirement 12ms
   ✓ EmailIngestionService > Performance and Stress Tests > should handle concurrent batch processing 19ms
   ✓ EmailIngestionService > Performance and Stress Tests > should handle large batch sizes efficiently 95ms
   × EmailIngestionService > Performance and Stress Tests > should maintain performance under memory pressure 94ms
     → expected false to be true // Object.is equality
   ✓ EmailIngestionService > Performance and Stress Tests > should handle rapid consecutive single email ingestion 34ms
   ✓ EmailIngestionService > Edge Cases and Boundary Conditions > should handle empty batch ingestion 9ms
   × EmailIngestionService > Edge Cases and Boundary Conditions > should handle batch with all duplicates 20ms
     → expected 0 to be greater than 0
   ✓ EmailIngestionService > Edge Cases and Boundary Conditions > should handle emails with maximum field lengths 10ms
   ✓ EmailIngestionService > Edge Cases and Boundary Conditions > should handle emails with special characters and encoding 8ms
   ✓ EmailIngestionService > Edge Cases and Boundary Conditions > should handle priority calculation edge cases 14ms
   × EmailIngestionService > Edge Cases and Boundary Conditions > should handle deduplication window edge cases 12ms
     → expected 'processed' to be 'duplicate' // Object.is equality
   × EmailIngestionService > Edge Cases and Boundary Conditions > should handle configuration validation edge cases 10ms
     → expected [Function] to throw an error
   ✓ EmailIngestionService > Resource Management > should properly clean up resources on shutdown 8ms
   ✓ EmailIngestionService > Resource Management > should handle connection cleanup on errors 15ms
   × EmailIngestionService > Resource Management > should prevent memory leaks in long-running operations 89ms
     → expected 144697.28 to be less than 1024
   ✓ EmailIngestionService > Shutdown > should shutdown gracefully 17ms
   ✓ EmailIngestionService > Shutdown > should handle multiple shutdown calls 13ms
   ✓ EmailIngestionServiceFactory > should create service with default configuration 25ms
   ✓ EmailIngestionServiceFactory > should create service with overrides 9ms
   ✓ EmailIngestionServiceFactory > should provide singleton instance 8ms
   ✓ EmailIngestionConfigPresets > should provide high throughput configuration 6ms
   ✓ EmailIngestionConfigPresets > should provide development configuration 7ms
   ✓ EmailIngestionConfigPresets > should provide test configuration 7ms
   ✓ EmailIngestionConfigPresets > should provide auto-pull configuration 9ms
   ✓ EmailIngestionConfigPresets > should provide hybrid configuration 6ms
 ❯ src/core/rag/EmbeddingService.test.ts (18 tests | 1 failed) 10047ms
   ✓ EmbeddingService > initialize > should initialize successfully when Ollama is available 4ms
   ✓ EmbeddingService > initialize > should warn when embedding model is not found 4ms
   ✓ EmbeddingService > initialize > should throw error when connection fails 3ms
   ✓ EmbeddingService > embed > should generate embeddings for text 2ms
   ✓ EmbeddingService > embed > should handle empty text 1ms
   ✓ EmbeddingService > embed > should return zero vector on error 3ms
   ✓ EmbeddingService > embedBatch > should generate embeddings for multiple texts 1ms
   × EmbeddingService > embedBatch > should handle large batches efficiently 10009ms
     → Test timed out in 10000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   ✓ EmbeddingService > cosineSimilarity > should calculate similarity between identical vectors 1ms
   ✓ EmbeddingService > cosineSimilarity > should calculate similarity between opposite vectors 1ms
   ✓ EmbeddingService > cosineSimilarity > should handle embeddings of different lengths 3ms
   ✓ EmbeddingService > cosineSimilarity > should handle zero vectors 1ms
   ✓ EmbeddingService > findSimilar > should find similar embeddings 1ms
   ✓ EmbeddingService > findSimilar > should respect topK parameter 1ms
   ✓ EmbeddingService > findSimilar > should return all results when topK exceeds available embeddings 4ms
   ✓ EmbeddingService > utility methods > should return correct dimensions 1ms
   ✓ EmbeddingService > utility methods > should return correct model name 1ms
   ✓ EmbeddingService > error handling > should handle initialization before embed calls 2ms
stdout | src/tests/critical-fixes-validation.test.ts > CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring

============================================================
🎯 CRITICAL FIXES VALIDATION COMPLETE

📊 OVERALL VALIDATION METRICS:
Total Scenarios Tested: 703

🔧 JSON PARSING VALIDATION:
- Success Rate: 85.8%
- Retry Usage: 14.2%
- Fallback Usage: 0.0%

📈 CHAIN SCORING VALIDATION:
- Score Range: 0 - 10%
- Unique Scores: 2
- Intermediate Scores (1-99%): 3/703 (0.4%)
- Binary Extremes (0% or 100%): 700 (99.6%)

⚡ PERFORMANCE:
- Average Processing Time: 0ms
- Average Confidence: 0.736

❌ CHAIN SCORING FIX: FAILED
❌ JSON PARSING FIX: FAILED
    

 ❯ src/tests/critical-fixes-validation.test.ts (7 tests | 6 failed) 459ms
   ✓ CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 🔧 JSON PARSING FIXES VALIDATION > should handle all problematic LLM response formats identified in production 10ms
   × CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 🔧 JSON PARSING FIXES VALIDATION > should validate retry mechanism with progressive parameters 12ms
     → expected "wrap" to be called 3 times, but got 1 times
   × CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 🔧 JSON PARSING FIXES VALIDATION > should validate fallback extraction methods 3ms
     → expected "wrap" to be called 3 times, but got 1 times
   × CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 📈 CHAIN SCORING FIXES VALIDATION > should eliminate binary scoring pathology across 500 scenarios 286ms
     → expected 1 to be greater than 20
   × CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 📈 CHAIN SCORING FIXES VALIDATION > should ensure single emails never achieve 100% scores 14ms
     → expected undefined to be 1 // Object.is equality
   × CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 📈 CHAIN SCORING FIXES VALIDATION > should produce gradual score progression based on chain completeness 22ms
     → expected undefined to be 1 // Object.is equality
   × CRITICAL FIXES VALIDATION: JSON Parsing + Chain Scoring > 🚀 INTEGRATED PERFORMANCE VALIDATION > should validate both fixes working together under load 105ms
     → expected 1 to be greater than 15
 ❯ src/core/validators/__tests__/BusinessResponseValidator.test.ts (24 tests | 6 failed) 185ms
   ✓ BusinessResponseValidator > Phone Number Extraction > should extract US phone numbers in various formats 12ms
   ✓ BusinessResponseValidator > Phone Number Extraction > should extract international phone numbers 2ms
   ✓ BusinessResponseValidator > Phone Number Extraction > should handle edge cases in phone numbers 1ms
   ✓ BusinessResponseValidator > Phone Number Extraction > should mask phone numbers in privacy mode 5ms
   × BusinessResponseValidator > Address Extraction > should extract complete US addresses 11ms
     → expected [ { …(8) } ] to have a length of 2 but got 1
   ✓ BusinessResponseValidator > Address Extraction > should extract PO Box addresses 1ms
   × BusinessResponseValidator > Address Extraction > should handle address variations 2ms
     → expected '02101\n        456 Elm Road Unit 12, …' to contain 'Apt'
   × BusinessResponseValidator > Business Name Extraction > should extract business names with entity types 1ms
     → expected [ { …(4) }, { …(4) }, { …(4) }, …(1) ] to have a length of 3 but got 4
   ✓ BusinessResponseValidator > Business Name Extraction > should extract standalone business names 1ms
   ✓ BusinessResponseValidator > Business Name Extraction > should handle business names with special characters 0ms
   ✓ BusinessResponseValidator > Business Hours Extraction > should extract standard hours 1ms
   ✓ BusinessResponseValidator > Business Hours Extraction > should detect 24/7 operations 0ms
   ✓ BusinessResponseValidator > Business Hours Extraction > should extract day ranges 0ms
   ✓ BusinessResponseValidator > Email and Website Extraction > should extract email addresses 0ms
   ✓ BusinessResponseValidator > Email and Website Extraction > should extract websites 0ms
   ✓ BusinessResponseValidator > Validation Results > should correctly identify actionable information 0ms
   ✓ BusinessResponseValidator > Validation Results > should identify missing information 1ms
   ✓ BusinessResponseValidator > Validation Results > should provide helpful suggestions 0ms
   × BusinessResponseValidator > Validation Results > should calculate confidence scores correctly 1ms
     → expected 1 to be less than 0.5
   × BusinessResponseValidator > False Positive Prevention > should not extract invalid phone numbers 1ms
     → expected [ { value: '1234567890', …(4) } ] to have a length of +0 but got 1
   ✓ BusinessResponseValidator > False Positive Prevention > should not extract non-address numbers as addresses 0ms
   × BusinessResponseValidator > False Positive Prevention > should not extract common words as business names 1ms
     → expected 2 to be less than or equal to 1
   ✓ BusinessResponseValidator > Performance > should handle large text efficiently 141ms
   ✓ BusinessResponseValidator > Performance > should deduplicate effectively 0ms
 ❯ src/core/prompts/__tests__/BusinessSearchPromptEnhancer.test.ts (38 tests | 5 failed) 54ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should enhance a basic prompt with standard level by default 3ms
   × BusinessSearchPromptEnhancer > enhance method > should handle null input gracefully 25ms
     → expected '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' to be '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' // Object.is equality
   × BusinessSearchPromptEnhancer > enhance method > should handle undefined input gracefully 6ms
     → expected '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' to be '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' // Object.is equality
   ✓ BusinessSearchPromptEnhancer > enhance method > should handle empty string input 1ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should apply minimal enhancement level 1ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should apply aggressive enhancement level 1ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should include examples when requested 0ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should not include examples when disabled 0ms
   × BusinessSearchPromptEnhancer > enhance method > should preserve original markers when requested 2ms
     → expected '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' to be 'Some prompt [BUSINESS_SEARCH_ENHANCED]' // Object.is equality
   ✓ BusinessSearchPromptEnhancer > enhance method > should replace markers when not preserving 1ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should inject custom instructions 0ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should add metadata with enhancement level and timestamp 0ms
   ✓ BusinessSearchPromptEnhancer > enhance method > should handle prompts with System/User structure 0ms
   × BusinessSearchPromptEnhancer > enhance method > should handle error during enhancement 1ms
     → expected 'Find a store' to be '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' // Object.is equality
   ✓ BusinessSearchPromptEnhancer > getDefaultBusinessPrompt method > should return a valid default prompt 0ms
   ✓ BusinessSearchPromptEnhancer > isAlreadyEnhanced method > should detect enhanced prompts 0ms
   ✓ BusinessSearchPromptEnhancer > isAlreadyEnhanced method > should detect non-enhanced prompts 0ms
   ✓ BusinessSearchPromptEnhancer > extractInstructions method > should extract instructions from enhanced prompt 0ms
   ✓ BusinessSearchPromptEnhancer > extractInstructions method > should return null when markers are missing 0ms
   ✓ BusinessSearchPromptEnhancer > extractInstructions method > should return null when markers are in wrong order 0ms
   ✓ BusinessSearchPromptEnhancer > isValidEnhancementLevel method > should validate correct enhancement levels 0ms
   ✓ BusinessSearchPromptEnhancer > isValidEnhancementLevel method > should reject invalid enhancement levels 0ms
   ✓ BusinessSearchPromptEnhancer > removeEnhancement method > should remove all enhancement markers and content 1ms
   ✓ BusinessSearchPromptEnhancer > removeEnhancement method > should handle prompts without enhancement 0ms
   ✓ BusinessSearchPromptEnhancer > removeEnhancement method > should remove examples section 0ms
   ✓ BusinessSearchPromptEnhancer > removeEnhancement method > should remove metadata 0ms
   ✓ BusinessSearchPromptEnhancer > needsEnhancement method > should detect prompts that need enhancement 1ms
   ✓ BusinessSearchPromptEnhancer > needsEnhancement method > should not flag already enhanced prompts 0ms
   ✓ BusinessSearchPromptEnhancer > needsEnhancement method > should not flag non-business prompts 0ms
   × BusinessSearchPromptEnhancer > Input sanitization > should remove injection attempts 1ms
     → expected '\n[BUSINESS_SEARCH_INSTRUCTIONS]\nIMP…' not to contain '[BUSINESS_SEARCH_ENHANCED]'
   ✓ BusinessSearchPromptEnhancer > Input sanitization > should handle various injection patterns 1ms
   ✓ BusinessSearchPromptEnhancer > Edge cases > should handle very long prompts 0ms
   ✓ BusinessSearchPromptEnhancer > Edge cases > should handle prompts with special characters 0ms
   ✓ BusinessSearchPromptEnhancer > Edge cases > should handle numeric-only input 0ms
   ✓ BusinessSearchPromptEnhancer > Edge cases > should handle prompts with newlines and tabs 0ms
   ✓ BusinessSearchPromptEnhancer > Performance and security > should complete enhancement quickly for typical prompts 0ms
   ✓ BusinessSearchPromptEnhancer > Performance and security > should not expose internal state 0ms
   ✓ BusinessSearchPromptEnhancer > Performance and security > should handle concurrent enhancement calls 1ms
 ❯ src/core/services/EmailChainAnalyzer.regression.test.ts (9 tests | 9 failed) 80ms
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Anti-Binary Distribution Validation > should produce distributed scores across 1000 realistic email scenarios 63ms
     → expected 1 to be greater than 10
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Anti-Binary Distribution Validation > should NEVER produce only 0% and 100% scores (binary pathology prevention) 3ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Anti-Binary Distribution Validation > should ensure single emails never achieve 100% completeness (critical constraint) 1ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Anti-Binary Distribution Validation > should produce gradual score progression based on chain completeness 1ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Scoring Component Validation > should validate individual scoring components sum correctly 1ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Scoring Component Validation > should handle edge cases without extreme scoring 1ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Consistency and Determinism > should produce identical scores for identical chains (deterministic) 1ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Consistency and Determinism > should show reasonable variation across similar but different chains 1ms
     → Cannot read properties of undefined (reading 'get')
   × CRITICAL REGRESSION: Binary Scoring Pathology Fix > CRITICAL: Production Dataset Simulation > should simulate 22,654 conversation scoring without binary pathology 7ms
     → Cannot read properties of undefined (reading 'get')
 ❯ src/core/services/EmailChainAnalyzer.test.ts (24 tests | 23 failed) 66ms
   ✓ EmailChainAnalyzer - Chain Completeness Scoring Tests > Gradual Scoring System (0-100%) > should assign low scores (0-30%) to single emails 5ms
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Gradual Scoring System (0-100%) > should assign moderate scores (30-60%) to incomplete chains 9ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Gradual Scoring System (0-100%) > should assign good scores (60-80%) to chains with progress but no resolution 2ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Gradual Scoring System (0-100%) > should assign high scores (80-100%) to complete workflow chains 4ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Gradual Scoring System (0-100%) > should handle long chains without resolution (medium-high scores) 2ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Scoring Components Validation > should give base points for start point detection 7ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Scoring Components Validation > should award points for middle correspondence 2ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Scoring Components Validation > should award maximum points for completion detection 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Scoring Components Validation > should award bonus points for chain length 4ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Scoring Components Validation > should penalize single emails appropriately 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Chain Type Specific Scoring > should apply quote-specific scoring rules 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Chain Type Specific Scoring > should apply order-specific scoring rules 3ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Workflow State Detection > should detect completion signals correctly 2ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Workflow State Detection > should detect in-progress signals 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Anti-Binary Scoring Regression Tests > should never produce only 0% and 100% scores across varied chains 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Anti-Binary Scoring Regression Tests > should produce distributed scores across 10 similar incomplete chains 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Anti-Binary Scoring Regression Tests > should ensure single emails never get 100% scores 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Anti-Binary Scoring Regression Tests > should ensure long chains can achieve high scores without being 100% 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Edge Cases and Validation > should handle empty chains gracefully 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Edge Cases and Validation > should handle chains with missing data 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Edge Cases and Validation > should handle very long chains appropriately 9ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Performance and Consistency > should produce consistent scores for identical chains 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Performance and Consistency > should complete analysis within reasonable time 1ms
     → Cannot read properties of undefined (reading 'get')
   × EmailChainAnalyzer - Chain Completeness Scoring Tests > Statistical Distribution Validation > should produce reasonable score distribution across diverse scenarios 1ms
     → Cannot read properties of undefined (reading 'get')
 ❯ src/api/services/EmailStorageService.test.ts (12 tests | 5 failed) 42ms
   ✓ EmailStorageService > Database Initialization > should initialize database with correct schema 8ms
   ✓ EmailStorageService > Database Initialization > should create proper indexes for performance 1ms
   × EmailStorageService > Email Storage > should store email with analysis and broadcast WebSocket update 7ms
     → Failed to store email analysis for "Test Email": Cannot read properties of undefined (reading 'stage1Time')
   × EmailStorageService > Email Storage > should handle WebSocket broadcast failures gracefully 2ms
     → Failed to store email analysis for "Test Email 2": Cannot read properties of undefined (reading 'stage1Time')
   ✓ EmailStorageService > Workflow State Updates > should update workflow state and broadcast changes 2ms
   ✓ EmailStorageService > Workflow State Updates > should handle missing current state gracefully 2ms
   × EmailStorageService > SLA Monitoring > should check SLA status and broadcast alerts 3ms
     → updates2 is not iterable
   ✓ EmailStorageService > SLA Monitoring > should handle at-risk emails correctly 7ms
   × EmailStorageService > Analytics > should calculate workflow analytics correctly 5ms
     → expected { totalEmails: undefined, …(3) } to deeply equal { totalEmails: 150, …(3) }
   ✓ EmailStorageService > SLA Monitoring Lifecycle > should start and stop SLA monitoring 1ms
   × EmailStorageService > SLA Monitoring Lifecycle > should handle SLA monitoring errors gracefully 1ms
     → Database error
   ✓ EmailStorageService > Resource Cleanup > should close database and stop monitoring on close 1ms
 ❯ src/database/security/__tests__/SqlInjectionProtection.test.ts (30 tests | 4 failed) 92ms
   ✓ SqlInjectionProtection > Parameter Validation > should allow safe parameters 3ms
   ✓ SqlInjectionProtection > Parameter Validation > should detect SQL injection patterns in parameters 1ms
   ✓ SqlInjectionProtection > Parameter Validation > should handle parameter count limits 1ms
   ✓ SqlInjectionProtection > Parameter Validation > should validate parameter length 34ms
   × SqlInjectionProtection > Query Validation > should allow safe queries 22ms
     → expected [Function] to not throw an error but 'SqlInjectionError: Suspicious SQL pat…' was thrown
   ✓ SqlInjectionProtection > Query Validation > should detect SQL injection in queries 1ms
   ✓ SqlInjectionProtection > Query Validation > should enforce query length limits 1ms
   ✓ SqlInjectionProtection > Column Name Sanitization > should allow safe column names 1ms
   ✓ SqlInjectionProtection > Column Name Sanitization > should reject unsafe column names 1ms
   ✓ SqlInjectionProtection > WHERE Clause Builder > should build safe WHERE clauses 4ms
   ✓ SqlInjectionProtection > WHERE Clause Builder > should handle array conditions safely 1ms
   ✓ SqlInjectionProtection > WHERE Clause Builder > should handle complex operators safely 1ms
   ✓ SqlInjectionProtection > WHERE Clause Builder > should reject malicious WHERE conditions 0ms
   ✓ SqlInjectionProtection > ORDER BY Clause Builder > should build safe ORDER BY clauses 0ms
   ✓ SqlInjectionProtection > ORDER BY Clause Builder > should reject unsafe ORDER BY columns 0ms
   ✓ SqlInjectionProtection > ORDER BY Clause Builder > should reject invalid sort directions 0ms
   ✓ SqlInjectionProtection > Full Query Validation > should validate complete query execution 1ms
   ✓ SqlInjectionProtection > Full Query Validation > should block malicious complete queries 1ms
   ✓ DatabaseInputSchemas > Basic Input Validation > should validate safe inputs 3ms
   × DatabaseInputSchemas > Basic Input Validation > should reject malicious inputs 2ms
     → expected [Function] to throw an error
   ✓ DatabaseInputSchemas > Search Query Validation > should allow safe search queries 2ms
   ✓ DatabaseInputSchemas > Search Query Validation > should block malicious search queries 2ms
   ✓ DatabaseInputSchemas > Column Name Validation > should allow valid column names 0ms
   × DatabaseInputSchemas > Column Name Validation > should reject invalid column names 1ms
     → expected [Function] to throw an error
   ✓ DatabaseInputSchemas > JSON Field Validation > should allow valid JSON 1ms
   ✓ DatabaseInputSchemas > JSON Field Validation > should reject invalid JSON 1ms
   ✓ Integration Tests > should handle complex nested input validation 1ms
   ✓ Integration Tests > should detect SQL injection in complex nested input 1ms
   × Performance Tests > should handle large safe inputs efficiently 3ms
     → expected [Function] to not throw an error but 'SqlInjectionError: Invalid parameter …' was thrown
   ✓ Performance Tests > should quickly detect obvious SQL injection attempts 0ms
 ❯ src/database/security/__tests__/sql-injection-protection.test.ts (28 tests | 3 failed) 42ms
   × SqlInjectionProtection > Parameter Validation > should accept safe parameters 10ms
     → Invalid parameter at index 1: Suspicious SQL pattern detected
   ✓ SqlInjectionProtection > Parameter Validation > should reject SQL injection attempts in parameters 1ms
   ✓ SqlInjectionProtection > Parameter Validation > should handle parameter count limits 1ms
   ✓ SqlInjectionProtection > Parameter Validation > should sanitize special SQL characters in LIKE patterns 1ms
   ✓ SqlInjectionProtection > Column Name Sanitization > should accept valid column names 1ms
   ✓ SqlInjectionProtection > Column Name Sanitization > should reject invalid column names 1ms
   ✓ SqlInjectionProtection > Column Name Sanitization > should reject overly long column names 0ms
   ✓ SqlInjectionProtection > Table Name Sanitization > should accept valid table names 0ms
   ✓ SqlInjectionProtection > Table Name Sanitization > should reject malicious table names 1ms
   ✓ SqlInjectionProtection > WHERE Clause Construction > should create safe WHERE clauses 1ms
   ✓ SqlInjectionProtection > WHERE Clause Construction > should handle NULL values 0ms
   ✓ SqlInjectionProtection > WHERE Clause Construction > should handle IN clauses with arrays 0ms
   ✓ SqlInjectionProtection > WHERE Clause Construction > should support complex operators 0ms
   ✓ SqlInjectionProtection > WHERE Clause Construction > should reject invalid operators 0ms
   ✓ SqlInjectionProtection > ORDER BY Clause Construction > should create safe ORDER BY clauses 0ms
   ✓ SqlInjectionProtection > ORDER BY Clause Construction > should default to ASC order 0ms
   ✓ SqlInjectionProtection > ORDER BY Clause Construction > should reject invalid order directions 2ms
   × SqlInjectionProtection > Query Validation > should accept safe queries 9ms
     → expected [Function] to not throw an error but 'SqlInjectionError: Suspicious SQL pat…' was thrown
   × SqlInjectionProtection > Query Validation > should detect string concatenation patterns 2ms
     → expected function to throw an error, but it didn't
   ✓ SqlInjectionProtection > Query Validation > should enforce query length limits 1ms
   ✓ SqlInjectionProtection > Zod Schema Validation > should validate email format 2ms
   ✓ SqlInjectionProtection > Zod Schema Validation > should validate search queries 2ms
   ✓ SqlInjectionProtection > Zod Schema Validation > should validate enum values 1ms
   ✓ SqlInjectionProtection > Real-world Attack Scenarios > should prevent classic SQL injection 0ms
   ✓ SqlInjectionProtection > Real-world Attack Scenarios > should prevent union-based injection 0ms
   ✓ SqlInjectionProtection > Real-world Attack Scenarios > should prevent blind SQL injection 0ms
   ✓ SqlInjectionProtection > Real-world Attack Scenarios > should prevent second-order injection 0ms
   ✓ SqlInjectionProtection > Performance > should validate parameters efficiently 0ms
stdout | src/core/services/__tests__/EmailIngestionService.performance.test.ts > EmailIngestionService Performance Tests

=== EmailIngestionService Performance Benchmark Summary ===
Requirement: 60+ emails/minute throughput

Overall Average Throughput: NaN emails/min
Tests Passed: 0/0
Requirement Met: ❌ NO
=============================================================


 ❯ src/core/services/__tests__/EmailIngestionService.performance.test.ts (10 tests | 10 failed) 52ms
   × EmailIngestionService Performance Tests > Throughput Benchmarks > should meet 60+ emails/minute requirement - Small Batch 9ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Throughput Benchmarks > should meet 60+ emails/minute requirement - Large Batch 3ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Throughput Benchmarks > should handle high-concurrency processing 3ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Scalability Tests > should scale linearly with email count 4ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Scalability Tests > should handle memory efficiently with large email volumes 8ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Stress Tests > should handle maximum configuration limits 9ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Stress Tests > should handle mixed email sizes efficiently 3ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Stress Tests > should maintain performance under continuous load 3ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Latency Tests > should maintain low latency for single email ingestion 4ms
     → Cannot read properties of undefined (reading 'mockImplementation')
   × EmailIngestionService Performance Tests > Latency Tests > should handle priority queue efficiently 3ms
     → Cannot read properties of undefined (reading 'mockImplementation')
 ❯ src/core/agents/specialized/EmailAnalysisAgent.test.ts (9 tests | 6 failed) 37ms
   × EmailAnalysisAgent > Entity Extraction > should extract PO numbers correctly 17ms
     → expected [] to include '12345678'
   × EmailAnalysisAgent > Entity Extraction > should extract quote numbers correctly 2ms
     → expected [] to include '123456'
   × EmailAnalysisAgent > Entity Extraction > should extract tracking numbers correctly 2ms
     → expected [] to include '1Z999AA10123456784'
   × EmailAnalysisAgent > Entity Extraction > should extract amounts correctly 5ms
     → expected [] to have a length of 2 but got +0
   ✓ EmailAnalysisAgent > Workflow State Determination > should set state to New for unread emails 2ms
   × EmailAnalysisAgent > Workflow State Determination > should set state to Pending External for emails with tracking numbers 4ms
     → expected 'New' to be 'Pending External' // Object.is equality
   × EmailAnalysisAgent > Categorization > should categorize order-related emails correctly 2ms
     → expected 0.6 to be greater than 0.8
   ✓ EmailAnalysisAgent > Categorization > should handle urgent emails with high priority 1ms
   ✓ EmailAnalysisAgent > Fallback Handling > should use fallback categorization when LLM fails 2ms
 ❯ src/core/rag/confidence/__tests__/AdaptiveDeliveryManager.test.ts (21 tests | 19 failed) 37ms
   × AdaptiveDeliveryManager > deliver() > should deliver high confidence response without warnings 10ms
     → expected 'very_high' to be 'high' // Object.is equality
   × AdaptiveDeliveryManager > deliver() > should deliver medium confidence response with caveats 4ms
     → expected 'Machine learning is a subset of artif…' to contain 'Please note:'
   × AdaptiveDeliveryManager > deliver() > should deliver low confidence response with strong warnings 1ms
     → expected 'very_low' to be 'low' // Object.is equality
   × AdaptiveDeliveryManager > deliver() > should deliver fallback response 2ms
     → expected 0.1 to be +0 // Object.is equality
   ✓ AdaptiveDeliveryManager > confidence formatting > should format confidence as percentage 0ms
   × AdaptiveDeliveryManager > confidence formatting > should format confidence as category 2ms
     → expected '75%' to be 'high' // Object.is equality
   × AdaptiveDeliveryManager > confidence formatting > should format confidence as detailed 1ms
     → expected 'Confidence: medium' to be '75% (high)' // Object.is equality
   × AdaptiveDeliveryManager > evidence preparation > should prepare evidence from sources 3ms
     → Target cannot be null or undefined.
   × AdaptiveDeliveryManager > evidence preparation > should limit evidence items 1ms
     → expected undefined to be defined
   × AdaptiveDeliveryManager > warnings generation > should generate warnings for low quality metrics 4ms
     → expected [ 'Human review recommended' ] to include 'Some claims in this response could no…'
   × AdaptiveDeliveryManager > warnings generation > should warn about uncertainty markers 1ms
     → expected [ 'Human review recommended' ] to include 'This response contains multiple uncer…'
   × AdaptiveDeliveryManager > feedback management > should capture user feedback 1ms
     → manager.getFeedback is not a function
   × AdaptiveDeliveryManager > feedback management > should track all feedback 0ms
     → manager.getAllFeedback is not a function
   × AdaptiveDeliveryManager > delivery statistics > should track delivery statistics 1ms
     → expected undefined to be 5 // Object.is equality
   × AdaptiveDeliveryManager > delivery statistics > should calculate feedback rate 0ms
     → expected undefined to be 0.5 // Object.is equality
   × AdaptiveDeliveryManager > performance reporting > should generate performance report 0ms
     → manager.generatePerformanceReport is not a function
   ✓ AdaptiveDeliveryManager > history management > should export delivery history 0ms
   × AdaptiveDeliveryManager > history management > should clear history and feedback 0ms
     → manager.getAllFeedback is not a function
   × AdaptiveDeliveryManager > edge cases > should handle empty sources 0ms
     → expected undefined to be defined
   × AdaptiveDeliveryManager > edge cases > should handle missing uncertainty markers 1ms
     → expected [ 'factual_accuracy', …(2) ] to have a length of +0 but got 3
   × AdaptiveDeliveryManager > edge cases > should handle extreme confidence values 1ms
     → expected 'very_high' to be 'high' // Object.is equality
 ❯ src/api/middleware/security/__tests__/csrf.test.ts (24 tests | 3 failed) 37ms
   × CSRF Protection > generateCSRFToken > should generate a 64-character hex token 15ms
     → expected '6d6f636b65642d72616e646f6d2d6279746573' to have a length of 64 but got 38
   × CSRF Protection > generateCSRFToken > should generate unique tokens 2ms
     → expected '6d6f636b65642d72616e646f6d2d6279746573' not to be '6d6f636b65642d72616e646f6d2d6279746573' // Object.is equality
   ✓ CSRF Protection > setCSRFCookie > should set secure httpOnly cookie in production 4ms
   ✓ CSRF Protection > setCSRFCookie > should set non-secure cookie in development 1ms
   ✓ CSRF Protection > getStoredCSRFToken > should get token from cookie 0ms
   ✓ CSRF Protection > getStoredCSRFToken > should get token from session if no cookie 0ms
   ✓ CSRF Protection > getStoredCSRFToken > should prefer cookie over session 0ms
   ✓ CSRF Protection > getRequestCSRFToken > should get token from header 0ms
   ✓ CSRF Protection > getRequestCSRFToken > should get token from body 1ms
   ✓ CSRF Protection > getRequestCSRFToken > should get token from query 1ms
   ✓ CSRF Protection > getRequestCSRFToken > should prefer header over body and query 0ms
   ✓ CSRF Protection > validateCSRFToken > should validate matching tokens 0ms
   ✓ CSRF Protection > validateCSRFToken > should reject missing request token 0ms
   ✓ CSRF Protection > validateCSRFToken > should reject missing stored token 0ms
   ✓ CSRF Protection > validateCSRFToken > should reject mismatched tokens 0ms
   ✓ CSRF Protection > createEnhancedCSRFProtection > should skip CSRF check for queries 1ms
   ✓ CSRF Protection > createEnhancedCSRFProtection > should skip CSRF check for subscriptions 0ms
   ✓ CSRF Protection > createEnhancedCSRFProtection > should throw error for mutations without CSRF token 1ms
   ✓ CSRF Protection > createEnhancedCSRFProtection > should allow mutations with valid CSRF token 1ms
   ✓ CSRF Protection > createEnhancedCSRFProtection > should handle token rotation 1ms
   × CSRF Protection > ensureCSRFToken > should generate token if none exists 2ms
     → expected '6d6f636b65642d72616e646f6d2d6279746573' to have a length of 64 but got 38
   ✓ CSRF Protection > ensureCSRFToken > should use existing token if present 1ms
   ✓ CSRF Protection > Integration with auth system > should work with authenticated users 1ms
   ✓ CSRF Protection > Integration with auth system > should work with guest users 0ms
 ❯ src/api/services/__tests__/EmailStorageService.processing-times.test.ts (10 tests | 4 failed) 38ms
   ✓ EmailStorageService - Processing Time Validation > validateProcessingTimes > should accept valid positive processing times 6ms
   ✓ EmailStorageService - Processing Time Validation > validateProcessingTimes > should correct negative stage1Time 3ms
   ✓ EmailStorageService - Processing Time Validation > validateProcessingTimes > should correct negative stage2Time 1ms
   ✓ EmailStorageService - Processing Time Validation > validateProcessingTimes > should correct negative totalTime and ensure it is at least sum of stages 1ms
   ✓ EmailStorageService - Processing Time Validation > validateProcessingTimes > should correct all negative values 1ms
   ✓ EmailStorageService - Processing Time Validation > validateProcessingTimes > should ensure totalTime is at least the sum of stage times 1ms
   × EmailStorageService - Processing Time Validation > validateProcessingTimes > should track processing time anomalies 4ms
     → "undefined" is not valid JSON
   × EmailStorageService - Processing Time Validation > storeEmail with processing time validation > should store email with validated processing times 7ms
     → Failed to store email analysis for "Test Email": transaction is not a function
   × EmailStorageService - Processing Time Validation > Database triggers for processing time validation > should prevent insertion of negative processing times after migration 10ms
     → db.transaction(...) is not a function
   × EmailStorageService - Processing Time Validation > Database triggers for processing time validation > should prevent update to negative processing times after migration 2ms
     → db.transaction(...) is not a function
stdout | src/core/master-orchestrator/MasterOrchestrator.test.ts > MasterOrchestrator > should process queries end-to-end
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.test.ts > MasterOrchestrator > should handle network errors gracefully
[ResearchAgent] Using SearXNG for search (unlimited, better results)

 ❯ src/core/master-orchestrator/MasterOrchestrator.test.ts (6 tests | 6 failed) 38ms
   × MasterOrchestrator > should create and execute plans 15ms
     → orchestrator.executePlan is not a function
   × MasterOrchestrator > should handle task dependencies 1ms
     → orchestrator.executePlan is not a function
   × MasterOrchestrator > should handle plan execution failures 1ms
     → getAgent does not exist
   × MasterOrchestrator > should process queries end-to-end 9ms
     → expected undefined to be 'ResearchAgent' // Object.is equality
   × MasterOrchestrator > should generate comprehensive summaries 1ms
     → orchestrator.generateSummary is not a function
   × MasterOrchestrator > should handle network errors gracefully 10ms
     → expected 'Based on the research findings, here …' to contain 'unable to process'
 ❯ src/database/__tests__/composite-indexes.test.ts (12 tests | 10 failed) 35ms
   × Composite Index Performance Tests > Index Creation > should create all composite indexes successfully 9ms
     → expected [ undefined ] to include 'idx_emails_received_sender_subject'
   × Composite Index Performance Tests > Index Creation > should improve query performance for email listing 3ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Index Creation > should improve query performance for workflow state queries 1ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Index Creation > should improve SLA monitoring query performance 1ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Query Performance Benchmarks > should execute email listing queries efficiently 4ms
     → expected [ { id: 1, …(4) } ] to have a length of 100 but got 1
   ✓ Composite Index Performance Tests > Query Performance Benchmarks > should execute analytics aggregation queries efficiently 1ms
   ✓ Composite Index Performance Tests > Query Performance Benchmarks > should execute user workload queries efficiently 0ms
   × Composite Index Performance Tests > Query Performance Benchmarks > should optimize date range queries with status filtering 5ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Query Performance Benchmarks > should optimize refresh token validation queries 1ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Query Performance Benchmarks > should optimize email entity queries by email 1ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Query Performance Benchmarks > should optimize workflow chain email joins 1ms
     → expected false to be true // Object.is equality
   × Composite Index Performance Tests > Index Rollback > should remove all composite indexes on rollback 1ms
     → actual value must be number or bigint, received "undefined"
 ❯ src/test/integration/email-analytics.test.ts (11 tests | 5 failed | 6 skipped) 31ms
   ↓ Email Analytics API Integration Tests > GET /api/trpc/emailAnalytics.getStats > should return email statistics
   ↓ Email Analytics API Integration Tests > GET /api/trpc/emailAnalytics.getDailyVolume > should return daily email volume
   ↓ Email Analytics API Integration Tests > GET /api/trpc/emailAnalytics.getEntityMetrics > should return entity metrics
   ↓ Email Analytics API Integration Tests > GET /api/trpc/emailAnalytics.getWorkflowDistribution > should return workflow distribution
   ↓ Email Analytics API Integration Tests > GET /api/trpc/emailAnalytics.getProcessingPerformance > should return processing performance metrics
   ↓ Email Analytics API Integration Tests > GET /api/trpc/emailAnalytics.getUrgencyDistribution > should return urgency distribution
   × EmailAnalyticsService Unit Tests > getTotalEmailsCount > should return correct total count 7ms
     → expected undefined to be 5 // Object.is equality
   × EmailAnalyticsService Unit Tests > getProcessedEmailsCount > should return correct processed count 1ms
     → expected undefined to be 3 // Object.is equality
   × EmailAnalyticsService Unit Tests > getPendingEmailsCount > should return correct pending count 1ms
     → expected undefined to be 2 // Object.is equality
   × EmailAnalyticsService Unit Tests > getAverageProcessingTime > should calculate correct average processing time 2ms
     → expected +0 to be 1325 // Object.is equality
   × EmailAnalyticsService Unit Tests > getStats > should return comprehensive statistics 11ms
     → expected { totalEmails: undefined, …(4) } to match object { totalEmails: 5, …(3) }
(1 matching property omitted from actual)
 ❯ src/ui/components/__tests__/WebSocketIntegration.test.tsx (12 tests | 12 failed) 26ms
   × WebSocket Integration Tests > WebSocket Connection > should establish connection successfully 8ms
     → document is not defined
   × WebSocket Integration Tests > WebSocket Connection > should handle connection errors gracefully 1ms
     → document is not defined
   × WebSocket Integration Tests > WebSocket Connection > should reconnect after disconnection 1ms
     → document is not defined
   × WebSocket Integration Tests > Event Handling > should handle email stats updated event 1ms
     → document is not defined
   × WebSocket Integration Tests > Event Handling > should queue events when disconnected 1ms
     → document is not defined
   × WebSocket Integration Tests > State Management > should prevent race conditions in event processing 4ms
     → [Immer] The plugin for 'MapSet' has not been loaded into Immer. To enable the plugin, import and call `enableMapSet()` when initializing your application.
   × WebSocket Integration Tests > State Management > should handle optimistic updates correctly 1ms
     → [Immer] The plugin for 'MapSet' has not been loaded into Immer. To enable the plugin, import and call `enableMapSet()` when initializing your application.
   × WebSocket Integration Tests > Subscription Management > should subscribe to channels 1ms
     → document is not defined
   × WebSocket Integration Tests > Subscription Management > should unsubscribe from channels 1ms
     → document is not defined
   × WebSocket Integration Tests > Performance > should handle high-frequency updates efficiently 3ms
     → [Immer] The plugin for 'MapSet' has not been loaded into Immer. To enable the plugin, import and call `enableMapSet()` when initializing your application.
   × WebSocket Integration Tests > Performance > should deduplicate events in queue 1ms
     → [Immer] The plugin for 'MapSet' has not been loaded into Immer. To enable the plugin, import and call `enableMapSet()` when initializing your application.
   × Email Dashboard WebSocket Integration > should update dashboard metrics in real-time 1ms
     → document is not defined
 ❯ src/test/integration/email-analytics-simple.test.ts (5 tests | 5 failed) 21ms
   × EmailAnalyticsService Simple Integration Tests > Basic Functionality > should return correct total emails count 8ms
     → expected undefined to be 5 // Object.is equality
   × EmailAnalyticsService Simple Integration Tests > Basic Functionality > should return correct processed emails count 1ms
     → expected undefined to be 3 // Object.is equality
   × EmailAnalyticsService Simple Integration Tests > Basic Functionality > should return correct pending emails count 1ms
     → expected undefined to be 2 // Object.is equality
   × EmailAnalyticsService Simple Integration Tests > Basic Functionality > should calculate correct average processing time 2ms
     → expected +0 to be 1500 // Object.is equality
   × EmailAnalyticsService Simple Integration Tests > Basic Functionality > should return comprehensive stats 6ms
     → expected { totalEmails: undefined, …(4) } to match object { totalEmails: 5, …(3) }
(1 matching property omitted from actual)
 ❯ src/api/services/__tests__/EmailStorageService.n1.test.ts (7 tests | 5 failed) 38ms
   × EmailStorageService N+1 Query Tests > getEmailsByWorkflow > should execute only 1 query regardless of result count 15ms
     → expected [ Array(1) ] to have a length of 5 but got 1
   ✓ EmailStorageService N+1 Query Tests > getEmailsByWorkflow > should handle large result sets efficiently 2ms
   × EmailStorageService N+1 Query Tests > batchLoadEmailsWithAnalysis > should load multiple emails in a single query 5ms
     → expected 1 to be 5 // Object.is equality
   ✓ EmailStorageService N+1 Query Tests > batchLoadEmailsWithAnalysis > should handle empty array without queries 3ms
   × EmailStorageService N+1 Query Tests > batchLoadEmailsWithAnalysis > should handle missing emails gracefully 4ms
     → expected 1 to be 2 // Object.is equality
   × EmailStorageService N+1 Query Tests > checkSLAStatus > should batch update SLA statuses in a transaction 3ms
     → actual value must be number or bigint, received "undefined"
   × EmailStorageService N+1 Query Tests > Performance comparison > should show significant performance improvement 3ms
     → expected 1 to be 100 // Object.is equality
 ❯ src/database/tests/TransactionManager.test.ts (11 tests | 11 failed) 18ms
   × TransactionManager > should execute simple transaction successfully 9ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should rollback transaction on error 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should handle nested transactions with savepoints 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should timeout long-running transactions 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should retry on retryable errors 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should execute batch operations with individual savepoints 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should rollback failed batch operation 0ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should track transaction metrics 0ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should handle concurrent transactions 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should use different isolation levels 0ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × TransactionManager > should emit transaction events 1ms
     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

     → [vitest] No "unlinkSync" export is defined on the "fs" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

 ❯ src/core/pipeline/__tests__/database-persistence.test.ts (2 tests | 2 failed) 16ms
   × Pipeline Database Persistence > should persist analysis results to email_analysis table 13ms
     → expected 1 to be 2 // Object.is equality
   × Pipeline Database Persistence > should handle INSERT OR REPLACE correctly for existing records 2ms
     → expected undefined to be 'old_model' // Object.is equality
 ❯ src/api/middleware/__tests__/auth.test.ts (8 tests | 4 failed) 17ms
   × Authentication Middleware Security Tests > JWT Verification - Security Critical > should properly verify valid JWT tokens 8ms
     → [vitest] No "default" export is defined on the "jsonwebtoken" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × Authentication Middleware Security Tests > JWT Verification - Security Critical > should reject tokens with invalid signatures 1ms
     → [vitest] No "default" export is defined on the "jsonwebtoken" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   × Authentication Middleware Security Tests > JWT Verification - Security Critical > should reject expired tokens 1ms
     → [vitest] No "default" export is defined on the "jsonwebtoken" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ✓ Authentication Middleware Security Tests > JWT Verification - Security Critical > should reject malformed tokens 2ms
   × Authentication Middleware Security Tests > JWT Verification - Security Critical > should reject tokens without required fields 1ms
     → [vitest] No "default" export is defined on the "jsonwebtoken" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

   ✓ Authentication Middleware Security Tests > JWT Verification - Security Critical > should handle missing JWT_SECRET environment variable 1ms
   ✓ Authentication Middleware Security Tests > Security Vulnerability Prevention > should not accept tokens with "none" algorithm 1ms
   ✓ Authentication Middleware Security Tests > Security Vulnerability Prevention > should not accept unsigned tokens 1ms
 ❯ src/adapters/__tests__/PipelineAnalysisAdapter.test.ts (9 tests | 5 failed) 24ms
   × PipelineAnalysisAdapter > fromDatabase > should transform pipeline data with full Llama and Phi4 analysis 14ms
     → expected 'critical' to be 'Critical' // Object.is equality
   × PipelineAnalysisAdapter > fromDatabase > should handle Stage 2 (Llama only) data 2ms
     → expected 'critical' to be 'High' // Object.is equality
   × PipelineAnalysisAdapter > fromDatabase > should handle Stage 1 (pattern only) data 1ms
     → expected 'critical' to be 'Low' // Object.is equality
   × PipelineAnalysisAdapter > fromDatabase > should handle malformed JSON gracefully 2ms
     → expected 'critical' to be 'Medium' // Object.is equality
   ✓ PipelineAnalysisAdapter > validate > should validate correct pipeline data structure 0ms
   ✓ PipelineAnalysisAdapter > validate > should reject invalid data structures 1ms
   × PipelineAnalysisAdapter > batchFromDatabase > should process multiple records successfully 1ms
     → expected 'critical' to be 'Critical' // Object.is equality
   ✓ PipelineAnalysisAdapter > batchFromDatabase > should handle errors in batch processing 1ms
   ✓ PipelineAnalysisAdapter > toDatabase > should throw error as pipeline data is read-only 1ms
 ❯ src/api/middleware/__tests__/rateLimiter.test.ts (8 tests | 2 failed) 19ms
   ✓ Rate Limiting Middleware Security Tests > Rate Limiting Functionality > should allow requests within rate limit 3ms
   × Rate Limiting Middleware Security Tests > Rate Limiting Functionality > should block requests exceeding rate limit 9ms
     → promise resolved "'success'" instead of rejecting
   ✓ Rate Limiting Middleware Security Tests > Rate Limiting Functionality > should use different counters for different users 1ms
   ✓ Rate Limiting Middleware Security Tests > Rate Limiting Functionality > should use IP address when user is not authenticated 1ms
   ✓ Rate Limiting Middleware Security Tests > Security Considerations > should handle missing user and IP gracefully 1ms
   ✓ Rate Limiting Middleware Security Tests > Security Considerations > should fail open when rate limiting encounters errors 1ms
   ✓ Rate Limiting Middleware Security Tests > Configuration Validation > should use default values when not specified 0ms
   × Rate Limiting Middleware Security Tests > Configuration Validation > should handle edge case configurations 2ms
     → promise resolved "'success'" instead of rejecting
 ❯ src/client/hooks/__tests__/useEmailAssignment.test.tsx (13 tests | 13 failed) 17ms
   × useEmailAssignment Hook > Data Access > should provide team members data 9ms
     → document is not defined
   × useEmailAssignment Hook > Data Access > should provide workload data 1ms
     → document is not defined
   × useEmailAssignment Hook > Data Access > should calculate loading state correctly 1ms
     → document is not defined
   × useEmailAssignment Hook > Email Assignment Functions > should assign email successfully 1ms
     → document is not defined
   × useEmailAssignment Hook > Email Assignment Functions > should bulk assign emails successfully 1ms
     → document is not defined
   × useEmailAssignment Hook > Email Assignment Functions > should get assignment suggestions 0ms
     → document is not defined
   × useEmailAssignment Hook > Helper Functions > should get team member by ID 0ms
     → document is not defined
   × useEmailAssignment Hook > Helper Functions > should return undefined for non-existent team member 0ms
     → document is not defined
   × useEmailAssignment Hook > Helper Functions > should get assigned member name 1ms
     → document is not defined
   × useEmailAssignment Hook > Helper Functions > should return "Unassigned" for no assignee 0ms
     → document is not defined
   × useEmailAssignment Hook > Helper Functions > should return member ID if member not found 0ms
     → document is not defined
   × useEmailAssignment Hook > Callback Options > should call onSuccess callback when provided 0ms
     → document is not defined
   × useEmailAssignment Hook > Error Handling > should provide error from mutations 0ms
     → document is not defined
 ❯ src/tests/performance/email-processing-benchmark.test.ts (7 tests | 7 skipped) 7ms
   ↓ Email Processing Performance Benchmarks > should achieve target throughput
   ↓ Email Processing Performance Benchmarks > should maintain low latency
   ↓ Email Processing Performance Benchmarks > should handle concurrent processing efficiently
   ↓ Email Processing Performance Benchmarks > should maintain high success rate
   ↓ Email Processing Performance Benchmarks > should scale workers effectively
   ↓ Email Processing Performance Benchmarks > should handle memory efficiently
   ↓ Email Processing Performance Benchmarks > should show significant improvement over sequential processing
 ✓ src/api/services/__tests__/WebSocketService.memory.test.ts (12 tests | 1 skipped) 67ms
 ✓ src/core/maestro/TaskQueue.test.ts (20 tests) 670ms
   ✓ TaskQueue > performance > should handle large queues efficiently  650ms
stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Initialization > should initialize successfully
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Initialization > should handle RAG initialization failure gracefully
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Query Processing > should process a simple query with real LLM
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Query Processing > should handle query metadata
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Plan Creation > should create a plan structure with real LLM
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Agent Registry > should have access to agent registry
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Database Integration > should work with in-memory database
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Error Handling > should handle empty queries gracefully
[ResearchAgent] Using SearXNG for search (unlimited, better results)

stdout | src/core/master-orchestrator/MasterOrchestrator.basic.test.ts > MasterOrchestrator Basic Tests > Error Handling > should handle queries without conversation ID
[ResearchAgent] Using SearXNG for search (unlimited, better results)

 ✓ src/core/master-orchestrator/MasterOrchestrator.basic.test.ts (9 tests) 63ms
 ✓ src/api/middleware/__tests__/websocketAuth.test.ts (17 tests) 34ms
 ✓ src/core/database/__tests__/EmailAnalyticsService.test.ts (14 tests) 16ms
 ✓ src/core/rag/RetrievalService.test.ts (11 tests) 7ms
 ✓ src/api/middleware/security/__tests__/headers.test.ts (15 tests) 22ms
 ✓ src/core/agents/specialized/ResearchAgent.test.ts (11 tests) 38ms
 ✓ src/core/rag/DocumentProcessor.test.ts (18 tests) 8ms
 ✓ src/api/webhooks/microsoft-graph.test.ts (8 tests) 9ms
 ✓ src/services/__tests__/PipelineJsonParser.test.ts (19 tests) 10ms
 ✓ src/core/data-collection/DataCollectionPipeline.test.ts (13 tests) 13ms
 ✓ src/core/master-orchestrator/PlanExecutor.test.ts (4 tests) 7ms
 ↓ src/middleware/__tests__/advancedRateLimit.test.ts (14 tests | 14 skipped)

 Test Files  61 failed | 13 passed | 1 skipped (75)
      Tests  227 failed | 445 passed | 28 skipped (700)
   Start at  15:44:17
   Duration  31.42s (transform 2.65s, setup 9.29s, collect 4.53s, tests 82.64s, environment 14ms, prepare 7.24s)

 ELIFECYCLE  Command failed with exit code 1.
