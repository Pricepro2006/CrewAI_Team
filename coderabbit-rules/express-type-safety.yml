# Express.js Type Safety Rule
# Detects common Express.js type safety issues
id: express-type-safety
language: TypeScript
message: "Express.js types should be imported as type-only imports for better type safety"
severity: error
rule:
  any:
    # Regular imports of Express types
    - pattern: import { Request, Response$$$} from 'express'
    - pattern: import { Router, Request$$$} from 'express'
    - pattern: import { Request, Response, NextFunction$$$} from 'express'
    
    # Missing return statements in middleware
    - pattern: |
        ($REQ: Request, $RES: Response$$$) => {
          $$$
        }
      not:
        contains:
          any:
            - pattern: return $$$
            - pattern: $RES.json($$$)
            - pattern: $RES.send($$$)
            - pattern: $RES.status($$$)
            - pattern: throw $$$

fix: |
  For Express types, use type-only imports:
  
  ❌ import { Router, Request, Response } from 'express';
  ✅ import { Router } from 'express';
  ✅ import type { Request, Response } from 'express';
  
  For middleware functions, ensure proper return values:
  
  ❌ Middleware without return or response
  ✅ return res.json(data);
  ✅ return next();
  ✅ throw new Error('message');

note: |
  This rule helps prevent common Express.js TypeScript issues:
  - Ensures type-only imports for better tree-shaking
  - Prevents middleware functions without proper completion
  - Maintains verbatimModuleSyntax compliance