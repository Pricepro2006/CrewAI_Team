<testsuites id="" name="" tests="234" failures="0" skipped="234" errors="0" time="0.07910300000000006">
<testsuite name="integration-workflows.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="chromium" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should complete full shopping journey from search to budget tracking" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should handle multi-category shopping with budget constraints" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should maintain data consistency across browser refresh" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Price Monitoring Integration › should sync price changes across all components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Price Monitoring Integration › should handle price alerts with grocery list integration" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should update budget in real-time as items are added/removed" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should show budget warnings when approaching limits" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should adjust budget recommendations based on shopping patterns" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Search and Filter Integration › should maintain search filters across navigation" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Search and Filter Integration › should handle complex search queries with category filtering" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Voice and Accessibility Integration › should handle voice commands across components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Voice and Accessibility Integration › should maintain accessibility features across all components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Error Recovery Integration › should recover gracefully from API failures across components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Error Recovery Integration › should maintain component state during network issues" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="chromium" tests="23" failures="0" skipped="23" time="0" errors="0">
<testcase name="Visual Regression Tests › Component Screenshots › should capture main dashboard layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture shopping tab with search results" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture grocery list interface" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture budget tracker visualization" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture price history charts" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture live pricing interface" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture mobile dashboard layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture tablet layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture mobile grocery list" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture empty states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture loading states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture error states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture item selection states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture hover states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture focus states for accessibility" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture modal and popup states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture high contrast mode if available" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture dark mode if available" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture reduced motion mode" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Browser-specific Rendering › should capture cross-browser consistent rendering" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Browser-specific Rendering › should handle font rendering differences" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Performance-based Visual Tests › should capture layout with large datasets" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Performance-based Visual Tests › should capture layout stability during loading" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="walmart-grocery-agent.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="chromium" tests="27" failures="0" skipped="27" time="0" errors="0">
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Navigation and Initial Load › should load Walmart Grocery Agent successfully" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Navigation and Initial Load › should handle navigation between tabs" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should perform basic product search" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should handle empty search results" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should display sale items with savings information" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should handle out-of-stock products correctly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should add items to grocery list from search results" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should calculate running totals correctly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should remove items from grocery list" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should persist grocery list across page refreshes" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should display live pricing interface" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should update ZIP code and show nearby stores" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should perform live price search" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should set up price monitoring" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Budget Tracking › should display budget overview" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Budget Tracking › should show budget alerts for overspending" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should display price history interface" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should show trending items with price changes" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should display active price alerts" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Accessibility and Performance › should meet basic accessibility standards" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Accessibility and Performance › should handle loading states properly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Error Handling › should handle API errors gracefully" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Error Handling › should handle network failures" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Cross-Component Integration › should maintain state across components" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Cross-Component Integration › should sync price updates across all components" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Voice and Natural Language Input › should handle voice input if available" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Voice and Natural Language Input › should handle natural language search queries" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="websocket-realtime.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="chromium" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should establish WebSocket connection on load" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should handle connection drops gracefully" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should reconnect automatically after connection loss" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should receive and display live price updates" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should show price change notifications" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should update multiple products simultaneously" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Stock Updates › should handle stock availability changes" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Stock Updates › should enable/disable add buttons based on stock" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Budget Alerts › should show budget threshold notifications" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Budget Alerts › should update budget progress bars in real-time" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Error Handling › should handle malformed WebSocket messages" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Error Handling › should handle WebSocket message delivery failures" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Performance with Real-time Updates › should handle high-frequency updates without performance degradation" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Performance with Real-time Updates › should batch updates to prevent UI thrashing" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration-workflows.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="firefox" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should complete full shopping journey from search to budget tracking" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should handle multi-category shopping with budget constraints" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should maintain data consistency across browser refresh" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Price Monitoring Integration › should sync price changes across all components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Price Monitoring Integration › should handle price alerts with grocery list integration" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should update budget in real-time as items are added/removed" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should show budget warnings when approaching limits" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should adjust budget recommendations based on shopping patterns" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Search and Filter Integration › should maintain search filters across navigation" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Search and Filter Integration › should handle complex search queries with category filtering" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Voice and Accessibility Integration › should handle voice commands across components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Voice and Accessibility Integration › should maintain accessibility features across all components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Error Recovery Integration › should recover gracefully from API failures across components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Error Recovery Integration › should maintain component state during network issues" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="firefox" tests="23" failures="0" skipped="23" time="0" errors="0">
<testcase name="Visual Regression Tests › Component Screenshots › should capture main dashboard layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture shopping tab with search results" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture grocery list interface" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture budget tracker visualization" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture price history charts" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture live pricing interface" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture mobile dashboard layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture tablet layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture mobile grocery list" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture empty states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture loading states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture error states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture item selection states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture hover states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture focus states for accessibility" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture modal and popup states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture high contrast mode if available" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture dark mode if available" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture reduced motion mode" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Browser-specific Rendering › should capture cross-browser consistent rendering" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Browser-specific Rendering › should handle font rendering differences" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Performance-based Visual Tests › should capture layout with large datasets" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Performance-based Visual Tests › should capture layout stability during loading" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="walmart-grocery-agent.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="firefox" tests="27" failures="0" skipped="27" time="0" errors="0">
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Navigation and Initial Load › should load Walmart Grocery Agent successfully" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Navigation and Initial Load › should handle navigation between tabs" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should perform basic product search" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should handle empty search results" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should display sale items with savings information" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should handle out-of-stock products correctly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should add items to grocery list from search results" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should calculate running totals correctly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should remove items from grocery list" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should persist grocery list across page refreshes" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should display live pricing interface" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should update ZIP code and show nearby stores" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should perform live price search" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should set up price monitoring" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Budget Tracking › should display budget overview" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Budget Tracking › should show budget alerts for overspending" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should display price history interface" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should show trending items with price changes" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should display active price alerts" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Accessibility and Performance › should meet basic accessibility standards" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Accessibility and Performance › should handle loading states properly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Error Handling › should handle API errors gracefully" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Error Handling › should handle network failures" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Cross-Component Integration › should maintain state across components" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Cross-Component Integration › should sync price updates across all components" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Voice and Natural Language Input › should handle voice input if available" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Voice and Natural Language Input › should handle natural language search queries" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="websocket-realtime.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="firefox" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should establish WebSocket connection on load" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should handle connection drops gracefully" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should reconnect automatically after connection loss" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should receive and display live price updates" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should show price change notifications" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should update multiple products simultaneously" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Stock Updates › should handle stock availability changes" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Stock Updates › should enable/disable add buttons based on stock" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Budget Alerts › should show budget threshold notifications" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Budget Alerts › should update budget progress bars in real-time" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Error Handling › should handle malformed WebSocket messages" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Error Handling › should handle WebSocket message delivery failures" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Performance with Real-time Updates › should handle high-frequency updates without performance degradation" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Performance with Real-time Updates › should batch updates to prevent UI thrashing" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="integration-workflows.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should complete full shopping journey from search to budget tracking" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should handle multi-category shopping with budget constraints" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Complete Shopping Workflow › should maintain data consistency across browser refresh" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Price Monitoring Integration › should sync price changes across all components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Price Monitoring Integration › should handle price alerts with grocery list integration" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should update budget in real-time as items are added/removed" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should show budget warnings when approaching limits" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Budget Integration Workflows › should adjust budget recommendations based on shopping patterns" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Search and Filter Integration › should maintain search filters across navigation" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Search and Filter Integration › should handle complex search queries with category filtering" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Voice and Accessibility Integration › should handle voice commands across components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Voice and Accessibility Integration › should maintain accessibility features across all components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Error Recovery Integration › should recover gracefully from API failures across components" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Integration Workflows - Cross-Component Interactions › Error Recovery Integration › should maintain component state during network issues" classname="integration-workflows.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="visual-regression.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="webkit" tests="23" failures="0" skipped="23" time="0" errors="0">
<testcase name="Visual Regression Tests › Component Screenshots › should capture main dashboard layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture shopping tab with search results" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture grocery list interface" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture budget tracker visualization" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture price history charts" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Screenshots › should capture live pricing interface" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture mobile dashboard layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture tablet layout" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Mobile Responsive Views › should capture mobile grocery list" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture empty states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture loading states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture error states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › State-based Screenshots › should capture item selection states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture hover states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture focus states for accessibility" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Component Interactions › should capture modal and popup states" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture high contrast mode if available" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture dark mode if available" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Theme and Styling Variations › should capture reduced motion mode" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Browser-specific Rendering › should capture cross-browser consistent rendering" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Browser-specific Rendering › should handle font rendering differences" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Performance-based Visual Tests › should capture layout with large datasets" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression Tests › Performance-based Visual Tests › should capture layout stability during loading" classname="visual-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="walmart-grocery-agent.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="webkit" tests="27" failures="0" skipped="27" time="0" errors="0">
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Navigation and Initial Load › should load Walmart Grocery Agent successfully" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Navigation and Initial Load › should handle navigation between tabs" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should perform basic product search" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should handle empty search results" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should display sale items with savings information" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Product Search Functionality › should handle out-of-stock products correctly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should add items to grocery list from search results" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should calculate running totals correctly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should remove items from grocery list" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Grocery List Management › should persist grocery list across page refreshes" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should display live pricing interface" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should update ZIP code and show nearby stores" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should perform live price search" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Live Pricing Features › should set up price monitoring" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Budget Tracking › should display budget overview" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Budget Tracking › should show budget alerts for overspending" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should display price history interface" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should show trending items with price changes" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Price History and Trends › should display active price alerts" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Accessibility and Performance › should meet basic accessibility standards" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Accessibility and Performance › should handle loading states properly" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Error Handling › should handle API errors gracefully" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Error Handling › should handle network failures" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Cross-Component Integration › should maintain state across components" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Cross-Component Integration › should sync price updates across all components" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Voice and Natural Language Input › should handle voice input if available" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Walmart Grocery Agent - Comprehensive E2E Tests › Voice and Natural Language Input › should handle natural language search queries" classname="walmart-grocery-agent.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="websocket-realtime.spec.ts" timestamp="2025-08-06T14:18:20.192Z" hostname="webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should establish WebSocket connection on load" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should handle connection drops gracefully" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Connection Management › should reconnect automatically after connection loss" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should receive and display live price updates" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should show price change notifications" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Price Updates › should update multiple products simultaneously" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Stock Updates › should handle stock availability changes" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Stock Updates › should enable/disable add buttons based on stock" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Budget Alerts › should show budget threshold notifications" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Real-time Budget Alerts › should update budget progress bars in real-time" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Error Handling › should handle malformed WebSocket messages" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › WebSocket Error Handling › should handle WebSocket message delivery failures" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Performance with Real-time Updates › should handle high-frequency updates without performance degradation" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="WebSocket Real-time Updates › Performance with Real-time Updates › should batch updates to prevent UI thrashing" classname="websocket-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>