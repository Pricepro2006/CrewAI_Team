name: Kubernetes Deployment Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/walmart-grocery-agent
  DOCKER_BUILDKIT: 1

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and Test
  build-test:
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run typecheck

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:ci
      env:
        NODE_OPTIONS: --max-old-space-size=4096

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up -d
        npm run test:wait
        npm run test:integration
        docker-compose -f docker-compose.test.yml down -v

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    # Docker build and push
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./k8s/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          NODE_ENV=production

    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

  # Kubernetes Manifest Validation
  k8s-validate:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
        # Validate base manifests
        kubectl apply --dry-run=client -f k8s/base/
        
        # Validate environment-specific manifests
        kustomize build k8s/environments/dev | kubectl apply --dry-run=client -f -
        kustomize build k8s/environments/staging | kubectl apply --dry-run=client -f -
        kustomize build k8s/environments/prod | kubectl apply --dry-run=client -f -

    - name: Run kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin/
        
        # Validate with kubeval
        kustomize build k8s/environments/dev | kubeval
        kustomize build k8s/environments/staging | kubeval
        kustomize build k8s/environments/prod | kubeval

    - name: Run kube-score
      run: |
        wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz
        tar xzf kube-score_linux_amd64.tar.gz
        sudo mv kube-score /usr/local/bin/
        
        # Score manifests
        kustomize build k8s/environments/prod | kube-score score -

  # Development Deployment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-test, k8s-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > ~/.kube/config

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update image tag
      run: |
        cd k8s/environments/dev
        kustomize edit set image crewai/walmart-grocery-agent=${{ needs.build-test.outputs.image-tag }}

    - name: Deploy to development
      run: |
        kustomize build k8s/environments/dev | kubectl apply -f -
        kubectl rollout status deployment/walmart-grocery-agent -n crewai-team-dev --timeout=600s

    - name: Run deployment verification
      run: |
        kubectl wait --for=condition=ready pod -l app=walmart-grocery-agent -n crewai-team-dev --timeout=300s
        kubectl get pods -n crewai-team-dev
        kubectl logs -l app=walmart-grocery-agent -n crewai-team-dev --tail=50

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-test, k8s-validate]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update image tag
      run: |
        cd k8s/environments/staging
        kustomize edit set image crewai/walmart-grocery-agent=${{ needs.build-test.outputs.image-tag }}

    - name: Deploy to staging
      run: |
        kustomize build k8s/environments/staging | kubectl apply -f -
        kubectl rollout status deployment/walmart-grocery-agent -n crewai-team-staging --timeout=600s

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=walmart-grocery-agent -n crewai-team-staging --timeout=300s
        
        # Get service endpoint
        SERVICE_IP=$(kubectl get service walmart-grocery-service -n crewai-team-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run health check
        curl -f http://${SERVICE_IP}:3000/health || exit 1
        
        # Run basic API test
        curl -f http://${SERVICE_IP}:3000/api/health || exit 1

  # Production Deployment (Manual Approval Required)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-test, k8s-validate, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config

    - name: Setup Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Backup current deployment
      run: |
        kubectl get deployment walmart-grocery-agent -n crewai-team -o yaml > deployment-backup.yaml
        
    - name: Update image tag
      run: |
        cd k8s/environments/prod
        kustomize edit set image crewai/walmart-grocery-agent=${{ needs.build-test.outputs.image-tag }}

    - name: Deploy to production
      run: |
        kustomize build k8s/environments/prod | kubectl apply -f -
        kubectl rollout status deployment/walmart-grocery-agent -n crewai-team --timeout=900s

    - name: Verify production deployment
      run: |
        kubectl wait --for=condition=ready pod -l app=walmart-grocery-agent -n crewai-team --timeout=600s
        
        # Check all pods are running
        kubectl get pods -n crewai-team -l app=walmart-grocery-agent
        
        # Verify health endpoints
        SERVICE_IP=$(kubectl get service walmart-grocery-service -n crewai-team -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://${SERVICE_IP}:3000/health
        
        # Check metrics endpoint
        curl -f http://${SERVICE_IP}:3000/metrics

    - name: Run production smoke tests
      run: |
        # Add comprehensive production tests here
        echo "Running production smoke tests..."
        
        # Test main functionality
        SERVICE_IP=$(kubectl get service walmart-grocery-service -n crewai-team -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Test API endpoints
        curl -X GET http://${SERVICE_IP}:3000/api/health
        curl -X GET http://${SERVICE_IP}:3000/api/walmart/search?q=test
        
        echo "Production deployment verified successfully!"

  # Rollback on failure
  rollback-production:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > ~/.kube/config

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/walmart-grocery-agent -n crewai-team
        kubectl rollout status deployment/walmart-grocery-agent -n crewai-team --timeout=600s

    - name: Notify of rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Production deployment failed and was rolled back!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}