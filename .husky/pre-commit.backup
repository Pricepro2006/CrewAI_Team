#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Performance tracking
start_time=$(date +%s)

echo "${BLUE}üîç Running pre-commit hooks...${NC}"

# Get list of staged files early for optimization
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
STAGED_COUNT=$(echo "$STAGED_FILES" | wc -l)

echo "${BLUE}üìä Processing ${STAGED_COUNT} staged files${NC}"

# Quick security checks first (fastest)
echo "${BLUE}üîê Running security validations...${NC}"

# Check for common security issues in commit
if echo "$STAGED_FILES" | grep -E '\.(env|pem|key|cert|crt|p12|pfx)$'; then
  echo "${RED}‚ùå Attempting to commit sensitive files!${NC}"
  echo "Found files with sensitive extensions. These should not be committed."
  echo "Add them to .gitignore instead."
  exit 1
fi

# Check for package-lock.json without package.json changes
if echo "$STAGED_FILES" | grep -q "package-lock.json" && ! echo "$STAGED_FILES" | grep -q "package.json"; then
  echo "${YELLOW}‚ö†Ô∏è  package-lock.json changed without package.json${NC}"
  echo "This might indicate a manual edit. Make sure this is intentional."
fi

# Run lint-staged with timeout protection
echo "${BLUE}üõ†Ô∏è  Running lint-staged (with 5min timeout)...${NC}"
timeout 300 npx lint-staged || {
  exit_code=$?
  if [ $exit_code -eq 124 ]; then
    echo "${RED}‚ùå Lint-staged timed out after 5 minutes!${NC}"
    echo "${YELLOW}üí° Consider running 'npm run format' and 'npm run typecheck' separately${NC}"
    echo "${YELLOW}üí° Or use 'git commit --no-verify' for emergency commits${NC}"
    exit 1
  else
    echo "${RED}‚ùå Lint-staged failed with exit code $exit_code${NC}"
    exit $exit_code
  fi
}

# Skip additional tests in pre-commit for performance
# These should be run in CI/CD instead
if [ "$SKIP_PRECOMMIT_TESTS" != "true" ] && echo "$STAGED_FILES" | grep -qE '\.(ts|tsx|js|jsx)$' && [ "$STAGED_COUNT" -lt 20 ]; then
  echo "${BLUE}üß™ Running quick tests for changed files...${NC}"
  if [ -f "package.json" ] && grep -q "test:related" package.json; then
    timeout 60 npm run test:related $STAGED_FILES || {
      echo "${YELLOW}‚ö†Ô∏è  Tests skipped due to timeout or failure${NC}"
      echo "${YELLOW}üí° Run 'npm test' manually before pushing${NC}"
    }
  fi
else
  echo "${YELLOW}‚è≠Ô∏è  Skipping tests (too many files or SKIP_PRECOMMIT_TESTS=true)${NC}"
  echo "${YELLOW}üí° Make sure to run 'npm test' before pushing${NC}"
fi

# Performance summary
end_time=$(date +%s)
duration=$((end_time - start_time))

echo "${GREEN}‚úÖ All pre-commit checks passed in ${duration}s!${NC}"

if [ $duration -gt 60 ]; then
  echo "${YELLOW}‚ö° Pre-commit took ${duration}s. Consider using SKIP_PRECOMMIT_TESTS=true for faster commits${NC}"
fi